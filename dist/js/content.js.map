{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/content.ts","webpack:///./src/ts/modules/API.ts","webpack:///./src/ts/modules/CenterPanel.ts","webpack:///./src/ts/modules/Colors.ts","webpack:///./src/ts/modules/DOM.ts","webpack:///./src/ts/modules/DateFormat.ts","webpack:///./src/ts/modules/Download.ts","webpack:///./src/ts/modules/DownloadControl.ts","webpack:///./src/ts/modules/EVT.ts","webpack:///./src/ts/modules/FileName.ts","webpack:///./src/ts/modules/Filter.ts","webpack:///./src/ts/modules/InitHomePage.ts","webpack:///./src/ts/modules/InitPage.ts","webpack:///./src/ts/modules/InitPageBase.ts","webpack:///./src/ts/modules/InitPostListPage.ts","webpack:///./src/ts/modules/InitPostPage.ts","webpack:///./src/ts/modules/InitTagPage.ts","webpack:///./src/ts/modules/Lang.ts","webpack:///./src/ts/modules/Log.ts","webpack:///./src/ts/modules/Output.ts","webpack:///./src/ts/modules/PageType.ts","webpack:///./src/ts/modules/ProgressBar.ts","webpack:///./src/ts/modules/RightIcon.ts","webpack:///./src/ts/modules/SaveData.ts","webpack:///./src/ts/modules/SaveSettings.ts","webpack:///./src/ts/modules/SettingHTML.ts","webpack:///./src/ts/modules/Settings.ts","webpack:///./src/ts/modules/Store.ts","webpack:///./src/ts/modules/Support.ts","webpack:///./src/ts/modules/Tip.ts","webpack:///./src/ts/modules/TitleBar.ts","webpack:///./src/ts/modules/langText.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,2BAA2B;AAC3B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AAC4B;AACG;AACH;AACO;AACN;AACN;AACG;AACC;;;;;;;;;;;;;ACjB3B;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,MAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,UAAU;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4EAA4E,UAAU;AACtF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAiE,IAAI,UAAU,OAAO;AACtF;AACA;AACA;AACA,8DAA8D,OAAO;AACrE;AACA;AACA;AACe;;;;;;;;;;;;;AC/Hf;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8B;AACF;AACA;AAC5B;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,0CAAI,mBAAmB;AAC/E;AACA;;AAEA,6EAA6E,0CAAI,sBAAsB;AACvG;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,0CAAI,iBAAiB;AACvD,+BAA+B,0CAAI,iBAAiB;AACpD;AACA;AACA;AACA,gCAAgC,0CAAI,iBAAiB;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA,6CAA6C,wCAAG;AAChD;AACA;AACA,0CAA0C,0CAAI;AAC9C;AACA,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACuB;;;;;;;;;;;;;ACxHvB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB;;;;;;;;;;;;;ACPlB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,KAAK;AACnE;AACA,6CAA6C,KAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;;;;;;;;;;;;;AC7Ef;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsB;;;;;;;;;;;;;ACxEtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC4B;AACU;AACA;AACM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wCAAG,sBAAsB,wCAAG;AACrC;AACA;AACA,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,QAAQ,wDAAW;AACnB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,QAAQ,kDAAQ;AAChB;AACA,wBAAwB,kDAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;AChEpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC4B;AACA;AACI;AACJ;AACE;AACQ;AACJ;AACA;AACI;AACM;AAC5C;AACA;AACA,oCAAoC;AACpC,gCAAgC;AAChC,2BAA2B;AAC3B,6BAA6B;AAC7B,2BAA2B;AAC3B,4BAA4B;AAC5B,4BAA4B;AAC5B,0DAA0D;AAC1D;AACA;AACA,kCAAkC;AAClC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,UAAU,aAAa,yBAAyB,QAAQ;AAC3E,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,OAAO,0CAAI;AAC9B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yCAAyC,4CAAK;AAC9C,QAAQ,wDAAW;AACnB;AACA;AACA,kCAAkC,0CAAI;AACtC;AACA;AACA,gCAAgC,4CAAK;AACrC,YAAY,wCAAG,MAAM,wCAAG;AACxB;AACA,kCAAkC,0CAAI;AACtC,YAAY,wCAAG,SAAS,0CAAI;AAC5B,YAAY,kDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,0CAAI,+DAA+D;;AAE7E;AACA,oEAAoE,8CAAM,OAAO,KAAK,0CAAI,kBAAkB;AAC5G,0EAA0E,KAAK,0CAAI,kBAAkB;AACrG,mEAAmE,8CAAM,MAAM,KAAK,0CAAI,kBAAkB;AAC1G,sEAAsE,8CAAM,QAAQ,KAAK,0CAAI,kBAAkB;AAC/G;AACA;AACA;AACA,MAAM,0CAAI;AACV,2CAA2C,0CAAI,kBAAkB;AACjE;AACA;AACA;AACA,mBAAmB,wCAAG;AACtB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB,SAAS;AACT;AACA;AACA;AACA,mCAAmC,8CAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,YAAY,4CAAK;AACjB,kCAAkC,4CAAK;AACvC;AACA;AACA,QAAQ,wDAAW;AACnB;AACA;AACA;AACA;AACA;AACA,6BAA6B,8CAAI;AACjC,8BAA8B,4CAAK;AACnC,YAAY,kDAAQ;AACpB;AACA;AACA,4BAA4B,4CAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4CAAK,qBAAqB,4CAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAAK;AAC7C,kDAAkD;AAClD;AACA;AACA;AACA;AACA,+BAA+B,gCAAgC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA,8BAA8B,0CAAI;AAClC,QAAQ,wCAAG,KAAK,0CAAI;AACpB;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAAK;AACtB,0CAA0C;AAC1C,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B,gBAAgB,kDAAQ;AACxB,sCAAsC,0CAAI;AAC1C,gBAAgB,wCAAG,SAAS,0CAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,QAAQ,kDAAQ;AAChB,8BAA8B,0CAAI;AAClC,QAAQ,wCAAG,OAAO,0CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAK;AACnC;AACA;AACA;AACA;AACA;AACA,4DAA4D,4CAAK;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB,KAAK,4CAAK,eAAe;AAC/D,QAAQ,wCAAG;AACX;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4CAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAQ;AACxB;AACA;AACA;AACA;;;;;;;;;;;;;ACzVA;AAAA;AAAA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;;;;;;;;;;;;;ACvCf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACM;AACF;AACF;AACY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AACxC;AACA;AACA;AACA,qBAAqB,8CAAI;AACzB;AACA,2BAA2B,4CAAK;AAChC;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,aAAa;AACb,cAAc,MAAM;AACpB;AACA;AACA,aAAa;AACb,cAAc,KAAK;AACnB;AACA;AACA,aAAa;AACb,cAAc,IAAI;AAClB;AACA;AACA,aAAa;AACb,cAAc,MAAM;AACpB;AACA;AACA,aAAa;AACb,cAAc,KAAK;AACnB;AACA;AACA,aAAa;AACb,cAAc,KAAK;AACnB,uBAAuB,sDAAU,mBAAmB,8CAAI;AACxD;AACA,aAAa;AACb,cAAc,UAAU;AACxB,uBAAuB,sDAAU,QAAQ,4CAAK,oBAAoB,8CAAI;AACtE;AACA;AACA,aAAa;AACb,cAAc,IAAI;AAClB;AACA;AACA,aAAa;AACb,cAAc,KAAK;AACnB;AACA;AACA,aAAa;AACb,cAAc,IAAI;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA,8DAA8D,IAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB,yBAAyB,0CAAI;AAC7B;AACA;AACA;AACA,uBAAuB,4CAAK;AAC5B,uBAAuB,YAAY;AACnC,yBAAyB,4CAAK;AAC9B;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA,wDAAwD,IAAI;AAC5D;AACA;AACA;AACA,wDAAwD,IAAI;AAC5D;AACA;AACA;AACA;AACA,mDAAmD,aAAa;AAChE;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACoB;;;;;;;;;;;;;AC9KpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACN;AACA;AACI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAI;AAChB,8BAA8B,8CAAI;AAClC;AACA,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA;AACA,gBAAgB,wCAAG;AACnB;AACA;AACA;AACA;AACA;AACA,aAAa,8CAAI;AACjB,YAAY,8CAAI;AAChB,YAAY,8CAAI;AAChB;AACA;AACA;AACA,uCAAuC,8CAAI;AAC3C,qCAAqC,8CAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,4CAAK;AACvD;AACA,uBAAuB,8CAAI;AAC3B;AACA;AACA;AACA,eAAe,8CAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAI;AACvB;AACA;AACA,mBAAmB,8CAAI;AACvB;AACA;AACA;AACA,kCAAkC,8CAAI;AACtC;AACA;AACA,+BAA+B,8CAAI;AACnC;AACA;AACA,iCAAiC,8CAAI;AACrC;AACA;AACA,8BAA8B,8CAAI;AAClC;AACA,+BAA+B,8CAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8CAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,QAAQ,wCAAG;AACX;AACA;AACA;AACA;AACA;AACkB;;;;;;;;;;;;;AC/IlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACI;AACN;AACkB;AAClB;AAC5B,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,qBAAqB,8CAAM,OAAO,0CAAI;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,wCAAG;AAC7B;AACA;AACA,yBAAyB,wCAAG;AAC5B;AACA;AACA;AACA,uBAAuB;AACvB;AACwB;;;;;;;;;;;;;AC5BxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC4B;AACU;AACQ;AACQ;AACV;AACE;AAC9C;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC,YAAY,wCAAG,MAAM,wCAAG;AACxB;AACA,SAAS;AACT;AACA;AACA,gBAAgB,kDAAQ;AACxB;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA,2BAA2B,kEAAgB;AAC3C;AACA,2BAA2B,0DAAY;AACvC;AACA,2BAA2B,wDAAW;AACtC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8B;AACF;AACM;AACF;AACJ;AACA;AACU;AACA;AACtC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,QAAQ,wCAAG;AACX;AACA;AACA,wBAAwB;AACxB;AACA,oBAAoB;AACpB;AACA;AACA,aAAa,4CAAK;AAClB,yBAAyB,0CAAI;AAC7B;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,QAAQ,wCAAG;AACX,QAAQ,wCAAG,SAAS,0CAAI;AACxB,QAAQ,kDAAQ;AAChB,QAAQ,8CAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAQ;AAChB;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA,QAAQ,4CAAK;AACb,QAAQ,wCAAG,KAAK,0CAAI,mBAAmB,4CAAK;AAC5C,QAAQ,wCAAG,KAAK,0CAAI;AACpB,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,QAAQ,kDAAQ;AAChB,QAAQ,wCAAG,OAAO,0CAAI;AACtB,qBAAqB,0CAAI;AACzB;AACA;AACwB;;;;;;;;;;;;;ACvFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACI;AACN;AACkB;AAClB;AAC5B,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,qBAAqB,8CAAM,OAAO,0CAAI;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,wCAAG;AAC7B;AACA;AACA,yBAAyB,wCAAG,mBAAmB,wCAAG;AAClD;AACA;AACA;AACA,uBAAuB;AACvB;AAC4B;;;;;;;;;;;;;AC5B5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACI;AACN;AACkB;AAClB;AACI;AAChC,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,qBAAqB,8CAAM,OAAO,0CAAI;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gDAAgD,0CAAI;AACpD;AACA;AACA,YAAY,4CAAK;AACjB;AACA,SAAS;AACT;AACA;AACA,QAAQ,wCAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,2BAA2B,wCAAG,SAAS,wCAAG;AAC1C;AACA;AACA;AACwB;;;;;;;;;;;;;AC5CxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACI;AACN;AACkB;AAClB;AAC5B,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,qBAAqB,8CAAM,OAAO,0CAAI;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,wCAAG;AAC7B;AACA;AACA,yBAAyB,wCAAG,4BAA4B,wCAAG,WAAW,wCAAG,+BAA+B,wCAAG;AAC3G;AACA;AACA;AACA,uBAAuB;AACvB;AACuB;;;;;;;;;;;;;AC5BvB;AAAA;AAAA;AAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,sBAAsB,kDAAQ;AAC9B,2DAA2D;AAC3D;AACA;AACA;AACA;AACgB;;;;;;;;;;;;;ACrChB;AAAA;AAAA;AAAA;AAAA;AAA4B;AACA;AACI;AAChC;AACA;AACA;AACA,qDAAqD;AACrD,4BAA4B;AAC5B,sDAAsD;AACtD;AACA;AACA,gCAAgC,wCAAG;AACnC,gBAAgB,4CAAK;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;;;;;;;;;;;;;ACzEf;AAAA;AAAA;AAAA;AAC4B;AACE;AAC9B;AACA;AACA,yDAAyD;AACzD,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0CAAI,eAAe;AACzD,+BAA+B,0CAAI,iBAAiB;AACpD;AACA;AACA,uCAAuC,0CAAI,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,0CAAI;AACpE;AACA;AACA,oEAAoE,0CAAI;AACxE,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAA;AAC4B;AAC5B;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;AC9EpB;AAAA;AAAA;AAAA;AAAA;AAAgC;AACJ;AACE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0CAAI,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4CAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4CAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACuB;;;;;;;;;;;;;AC/EvB;AAAA;AAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACF;AACE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAM,QAAQ,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,YAAY,8CAAI;AAChB;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAK;AACb;AACA;AACA,YAAY,8CAAM;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAM;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8CAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8CAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;AClUpB;AAAA;AAAA;AAAA;AAAA;AACA;AAC4B;AACI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4CAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG,wBAAwB,2BAA2B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACwB;;;;;;;;;;;;;AC1LxB;AAAA;AAAA;AAA8B;AACE;AAChC;AACA;AACA,wCAAwC,0CAAI,iBAAiB;;AAE7D;AACA;AACA,yDAAyD,4CAAK,0BAA0B,KAAK,0CAAI,eAAe,MAAM;;AAEtH;AACA;AACA,yDAAyD,4CAAK,0BAA0B,KAAK,0CAAI,eAAe,MAAM;;AAEtH;AACA;AACA,yDAAyD,4CAAK,0BAA0B,KAAK,0CAAI,eAAe,MAAM;;AAEtH;AACA;AACA,yDAAyD,4CAAK,+BAA+B,KAAK,0CAAI,iBAAiB,MAAM;;AAE7H;AACA;AACA,yDAAyD,4CAAK,uBAAuB,KAAK,0CAAI,iBAAiB,MAAM;;AAErH;AACA;AACA,yDAAyD,4CAAK,0BAA0B,KAAK,0CAAI,eAAe,MAAM;AACtH;;AAEA;AACA,wCAAwC,0CAAI,iBAAiB;;AAE7D;AACA;AACA,gCAAgC,0CAAI,iBAAiB,MAAM;;AAE3D;AACA;AACA,gCAAgC,0CAAI,iBAAiB,MAAM;AAC3D;;;AAGA;AACA,wCAAwC,0CAAI,mBAAmB,MAAM,M;AACrE;AACA;AACA;AACA;AACA,QAAQ,0CAAI;AACZ;AACA;AACA;;AAEA;AACA,0DAA0D,0CAAI,qBAAqB,IAAI,0CAAI,mBAAmB,MAAM,M;AACpH;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0CAAI,eAAe,MAAM;AACzD;AACA;AACA,gCAAgC,0CAAI,eAAe,MAAM;AACzD;AACA;AACA;;AAEA;AACA,0DAA0D,0CAAI,qBAAqB,IAAI,0CAAI,mBAAmB;;AAE9G;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA,wCAAwC,0CAAI,uBAAuB,MAAM,M;AACzE;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,0CAAI,uBAAuB,MAAM,M;AACzE;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,0CAAI,qBAAqB,MAAM,M;AACvE;AACA;AACA;AACA;;AAEA;AACA,0DAA0D,0CAAI,sBAAsB,IAAI,0CAAI,kBAAkB;AAC9G,8FAA8F,4CAAK,iBAAiB;AACpH;AACA;AACA;AACA,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,IAAI,GAAG,IAAI;AACnC,wBAAwB,MAAM,GAAG,MAAM;AACvC,wBAAwB,OAAO,GAAG,OAAO;AACzC,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,UAAU,GAAG,UAAU;AAC/C,wBAAwB,MAAM,GAAG,MAAM;AACvC,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,IAAI,GAAG,IAAI;AACnC,wBAAwB,IAAI,GAAG,IAAI;AACnC,wBAAwB,KAAK,GAAG,KAAK;AACrC;AACA,YAAY;AACZ;AACA;AACA;AACA,gBAAgB,0CAAI;AACpB;AACA,2BAA2B;AAC3B;AACA,0BAA0B,KAAK;AAC/B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,IAAI;AAC9B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,MAAM;AAChC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,OAAO;AACjC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,KAAK;AAC/B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,UAAU;AACpC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,MAAM;AAChC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,KAAK;AAC/B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,IAAI;AAC9B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,IAAI;AAC9B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,KAAK;AAC/B,QAAQ,0CAAI;AACZ;AACA,QAAQ,0CAAI;AACZ;;AAEA;AACA,wCAAwC,0CAAI,iBAAiB;AAC7D,2FAA2F;AAC3F,mEAAmE,0CAAI,eAAe;AACtF;AACA;AACA,cAAc,0CAAI,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0DAA0D,0CAAI,iBAAiB,IAAI,0CAAI,mBAAmB;AAC1G;AACA;;AAEA;AACA,0DAA0D,0CAAI,oBAAoB,IAAI,0CAAI,mBAAmB;AAC7G;AACA;AACA;;AAEA;AACA;AACA;AACA;AACe,uEAAQ,EAAC;;;;;;;;;;;;;ACjNxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACA;AACkB;AACT;AACrC;AACA;AACA;AACA;AACA,mDAAmD;AACnD,oBAAoB,wCAAG,iBAAiB,oDAAQ;AAChD;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA,6CAA6C,wCAAG;AAChD;AACA;AACA;AACA,6CAA6C,wCAAG;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4DAA4D,MAAM;AAClE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4DAA4D,MAAM;AAClE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG,wBAAwB,2BAA2B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,aAAa;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACgB;;;;;;;;;;;;;ACrJhB;AAAA;AAAA;AAAA;AAC4B;AAC5B;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,iCAAiC,KAAK,EAAE,MAAM,EAAE,MAAM;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG,oBAAoB,wCAAG;AAC1D;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiB;;;;;;;;;;;;;AChGjB;AAAA;AAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B,aAAa;AACb,SAAS;AACT;AACA;AACA;;;;;;;;;;;;ACtCA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AACsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kDAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA;AACA,gCAAgC,MAAM,GAAG,eAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;AC3FpB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc;AACd,4BAA4B;AAC5B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,KAAK,EAAE,MAAM,EAAE,MAAM;AACpD,mCAAmC,KAAK,EAAE,MAAM,EAAE,MAAM;AACxD,yDAAyD,KAAK,EAAE,MAAM,EAAE,MAAM;AAC9E,+BAA+B,KAAK,EAAE,MAAM,EAAE,MAAM;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA,cAAc;AACd,gBAAgB;AAChB,gBAAgB;AAChB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,WAAW;AACX,WAAW;AACX,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,MAAM,EAAE,OAAO,gBAAgB,OAAO,IAAI,MAAM;AACzF,sDAAsD,MAAM,EAAE,OAAO,0BAA0B,OAAO,EAAE,MAAM;AAC9G,mCAAmC,mFAAmF,MAAM,EAAE,OAAO,oCAAoC,OAAO,MAAM,MAAM;AAC5L,yCAAyC,MAAM,EAAE,OAAO,gBAAgB,OAAO,IAAI,MAAM;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,KAAK,IAAI,UAAU;AAC5D,2CAA2C,KAAK,IAAI,UAAU;AAC9D,+FAA+F,KAAK,MAAM,UAAU;AACpH,yCAAyC,KAAK,IAAI,UAAU;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB","file":"content.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/ts/content.ts\");\n","/*\r\n * project: Pixiv Fanbox Downloader\r\n * author:  xuejianxianzun; 雪见仙尊\r\n * license: GPL-3.0-or-later; http://www.gnu.org/licenses/gpl-3.0.txt\r\n * Github： https://github.com/xuejianxianzun/PixivFanboxDownloader\r\n * Releases: https://github.com/xuejianxianzun/PixivFanboxDownloader/releases\r\n * Wiki:    https://github.com/xuejianxianzun/PixivFanboxDownloader/wiki\r\n * E-mail:  xuejianxianzun@gmail.com\r\n * QQ group:  853021998\r\n */\r\nimport './modules/PageType';\r\nimport './modules/CenterPanel';\r\nimport './modules/InitPage';\r\nimport './modules/DownloadControl';\r\nimport './modules/RightIcon';\r\nimport './modules/Tip';\r\nimport './modules/Output';\r\nimport './modules/Support';\r\n","class API {\r\n    // 检查给定的字符串解析为数字后，是否大于 0\r\n    static checkNumberGreater0(arg) {\r\n        let num = parseInt(arg);\r\n        // 空值会是 NaN\r\n        if (!isNaN(num) && num > 0) {\r\n            // 符合条件\r\n            return {\r\n                result: true,\r\n                value: num,\r\n            };\r\n        }\r\n        // 不符合条件\r\n        return {\r\n            result: false,\r\n            value: 0,\r\n        };\r\n    }\r\n    // 从 url 中获取指定的查询字段的值\r\n    // 注意：返回值经过 encodeURIComponent 编码！\r\n    static getURLSearchField(url, query) {\r\n        const result = new URL(url).searchParams.get(query);\r\n        if (result !== null) {\r\n            return encodeURIComponent(result);\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    // 从 URL 中获取指定路径名的值，适用于符合 RESTful API 风格的路径\r\n    // 如 https://kyomoneko.fanbox.cc/posts/904593\r\n    // 把路径用 / 分割，查找 key 所在的位置，后面一项就是它的 value\r\n    static getURLPathField(query) {\r\n        const pathArr = location.pathname.split('/');\r\n        const index = pathArr.indexOf(query);\r\n        if (index > 0) {\r\n            return pathArr[index + 1];\r\n        }\r\n        throw new Error(`getURLPathField ${query} failed!`);\r\n    }\r\n    // 组装 url 的查询参数。当该参数有值时，将其添加到 url 里\r\n    static assembleURL(baseURL, args) {\r\n        const temp = new URL(baseURL);\r\n        for (const [key, value] of Object.entries(args)) {\r\n            value && temp.searchParams.append(key, value.toString());\r\n        }\r\n        return temp.toString();\r\n    }\r\n    // 通用的请求流程\r\n    // 发送 get 请求，返回 json 数据，抛出异常\r\n    static request(url) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url, {\r\n                method: 'get',\r\n                credentials: 'include',\r\n            })\r\n                .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                else {\r\n                    // 第一种异常，请求成功但状态不对\r\n                    reject({\r\n                        status: response.status,\r\n                        statusText: response.statusText,\r\n                    });\r\n                }\r\n            })\r\n                .then((data) => {\r\n                resolve(data);\r\n            })\r\n                .catch((error) => {\r\n                // 第二种异常，请求失败\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    static getCreatorId(url) {\r\n        const split = url.split('/');\r\n        // 首先获取以 @ 开头的用户名\r\n        for (const str of split) {\r\n            if (str.startsWith('@')) {\r\n                return str.split('@')[1];\r\n            }\r\n        }\r\n        // 获取自定义的用户名\r\n        for (const str of split) {\r\n            // hostname\r\n            if (str.endsWith('.fanbox.cc')) {\r\n                return str.split('.')[0];\r\n            }\r\n        }\r\n        throw new Error('GetCreatorId error!');\r\n    }\r\n    // 用 creatorId（用户名） 获取 userId\r\n    static async getUserId(creatorId) {\r\n        const baseURL = `https://api.fanbox.cc/creator.get?creatorId=${creatorId}`;\r\n        const res = (await this.request(baseURL));\r\n        return res.body.user.userId;\r\n    }\r\n    static async getPostListSupporting(limit = 10, maxPublishedDatetime = '', maxId = '') {\r\n        const baseURL = 'https://api.fanbox.cc/post.listSupporting';\r\n        const url = this.assembleURL(baseURL, {\r\n            limit,\r\n            maxPublishedDatetime,\r\n            maxId,\r\n        });\r\n        return this.request(url);\r\n    }\r\n    static async getPostListByUser(creatorId, limit = 10, maxPublishedDatetime = '', maxId = '') {\r\n        const baseURL = `https://api.fanbox.cc/post.listCreator?creatorId=${creatorId}`;\r\n        const url = this.assembleURL(baseURL, {\r\n            limit,\r\n            maxPublishedDatetime,\r\n            maxId,\r\n        });\r\n        return this.request(url);\r\n    }\r\n    static async getTagPostListByUser(userId, tag) {\r\n        const url = `https://api.fanbox.cc/post.listTagged?tag=${tag}&userId=${userId}`;\r\n        return this.request(url);\r\n    }\r\n    static async getPost(postId) {\r\n        const url = `https://api.fanbox.cc/post.info?postId=${postId}`;\r\n        return this.request(url);\r\n    }\r\n}\r\nexport { API };\r\n","// 用户界面\r\nimport { lang } from './Lang';\r\nimport { EVT } from './EVT';\r\nimport { DOM } from './DOM';\r\n// 中间面板\r\nclass CenterPanel {\r\n    constructor() {\r\n        this.centerPanel = document.createElement('div'); // 中间面板\r\n        this.addCenterPanel();\r\n        this.bindEvents();\r\n    }\r\n    // 添加中间面板\r\n    addCenterPanel() {\r\n        const centerPanelHTML = `\r\n      <div class=\"centerWrap\">\r\n      <div class=\"centerWrap_head\">\r\n      <p class=\"centerWrap_title blue\">Pixiv Fanbox Downloader</p>\r\n      <div class=\"btns\">\r\n      <a class=\"has_tip centerWrap_top_btn\" data-tip=\"${lang.transl('_github')}\" href=\"https://github.com/xuejianxianzun/PixivFanboxDownloader\" target=\"_blank\">\r\n      <svg t=\"1574401005111\" class=\"icon\" widht=\"16\" height=\"16\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"2594\" xmlns:xlink=\"http://www.w3.org/1999/xlink><defs><style type=\"text/css\"></style></defs><path d=\"M0 520.886c0-69.368 13.51-135.697 40.498-199.02 26.987-63.323 63.322-117.826 109.006-163.51 45.65-45.65 100.154-81.985 163.51-109.006A502.289 502.289 0 0 1 512 8.92c69.335 0 135.663 13.477 198.986 40.497 63.356 26.988 117.86 63.323 163.51 109.007 45.684 45.65 82.02 100.154 109.006 163.51A502.289 502.289 0 0 1 1024 520.852c0 111.318-32.504 211.472-97.511 300.494-64.975 88.989-148.48 150.825-250.484 185.476-5.351 0-9.348-0.99-11.99-2.973-2.676-1.982-4.196-3.997-4.526-6.012a59.458 59.458 0 0 1-0.495-8.984 7.663 7.663 0 0 1-0.991-3.006v-128.99c0-40.63-14.336-75.314-43.008-103.986 76.667-13.345 134.011-41.819 171.999-85.487 37.987-43.669 57.013-96.52 57.013-158.522 0-58.005-18.663-108.346-56.022-150.99 13.345-42.678 11-87.668-6.97-135.003-18.697-1.322-39.011 1.85-61.01 9.513-22 7.663-38.318 14.831-49.02 21.47-10.637 6.673-20.316 13.016-28.97 19.027-38.68-10.669-81.854-16.02-129.486-16.02-47.7 0-90.509 5.351-128.529 16.02-7.333-5.35-15.855-11.164-25.5-17.507-9.68-6.342-26.493-14.005-50.507-22.99-23.982-9.018-45.65-12.85-65.008-11.495-18.663 47.996-20.645 93.646-5.979 136.984-36.665 42.678-54.998 92.986-54.998 150.99 0 62.002 18.663 114.689 55.99 157.994 37.326 43.339 94.67 72.01 171.998 86.016a142.303 142.303 0 0 0-39.969 70.029c-56.683 13.972-96.355 3.963-119.015-30.06-42.017-61.308-79.674-83.307-113.003-65.965-4.69 4.657-3.997 9.48 1.982 14.501 6.012 4.988 14.996 11.66 27.02 19.985 11.99 8.357 20.976 17.507 26.987 27.515 0.661 1.322 2.51 6.177 5.517 14.502a831.917 831.917 0 0 0 8.985 23.981c2.973 7.663 8.654 16.186 17.011 25.5 8.324 9.349 18.003 17.178 29.003 23.52 11 6.309 26.161 11 45.485 14.006 19.324 2.972 41.323 3.138 65.998 0.495v100.484c0 0.991-0.165 2.643-0.495 5.021-0.33 2.312-0.991 3.964-1.982 4.955-0.991 1.024-2.345 2.015-4.03 3.039a12.52 12.52 0 0 1-6.474 1.486c-2.676 0-6.012-0.33-10.009-0.99-101.343-35.345-183.825-97.182-247.51-185.51C31.842 731.037 0 631.577 0 520.92z\" p-id=\"2595\"></path></svg>\r\n      </a>\r\n      \r\n        <div class=\"has_tip centerWrap_top_btn centerWrap_close\" data-tip=\"${lang.transl('_快捷键切换显示隐藏')}\">\r\n        <svg t=\"1574392276519\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"1123\" data-spm-anchor-id=\"a313x.7781069.0.i0\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"14\" height=\"14\"><defs><style type=\"text/css\"></style></defs><path d=\"M521.693867 449.297067L111.4112 39.0144a51.2 51.2 0 1 0-72.430933 72.362667l410.282666 410.3168-410.282666 410.3168a51.2 51.2 0 1 0 72.3968 72.3968l410.3168-410.282667 410.3168 410.282667a51.2 51.2 0 1 0 72.3968-72.362667l-410.282667-410.350933 410.282667-410.282667a51.2 51.2 0 1 0-72.3968-72.3968l-410.282667 410.282667z\" p-id=\"1124\"></path></svg>\r\n        </div>\r\n      </div>\r\n      </div>\r\n\r\n      <div class=\"centerWrap_con\">\r\n      <slot data-name=\"form\"></slot>\r\n      </div>\r\n\r\n      <div class=\"gray1 bottom_help_bar\"> \r\n      <span class=\"showDownTip\">${lang.transl('_常见问题')}</span>\r\n      <span id=\"resetOption\">${lang.transl('_重置设置')}</span>\r\n      <a id=\"zanzhu\" class=\"wiki2 patronText\" href=\"https://afdian.net/@xuejianxianzun\" target=\"_blank\">通过“爱发电”网站支持我</a>\r\n      <a id=\"patreon\" class=\"wiki2 patronText\" href=\"https://www.patreon.com/xuejianxianzun\" target=\"_blank\">Become a patron</a>\r\n      <br>\r\n      <p class=\"downTip tip\"> ${lang.transl('_下载说明')}</p>\r\n      </div>\r\n\r\n      </div>\r\n      `;\r\n        document.body.insertAdjacentHTML('beforeend', centerPanelHTML);\r\n        this.centerPanel = document.querySelector('.centerWrap');\r\n        const userLang = document.documentElement.lang;\r\n        if (['zh', 'zh-CN', 'zh-Hans'].includes(userLang)) {\r\n            document.getElementById('zanzhu').style.display = 'inline-block';\r\n        }\r\n        else {\r\n            document.getElementById('patreon').style.display = 'inline-block';\r\n        }\r\n    }\r\n    // 绑定中间面板上的事件\r\n    bindEvents() {\r\n        // 监听点击扩展图标的消息，开关中间面板\r\n        chrome.runtime.onMessage.addListener((msg) => {\r\n            if (msg.msg === 'click_icon') {\r\n                if (this.centerPanel.style.display === 'block') {\r\n                    this.close();\r\n                }\r\n                else {\r\n                    this.show();\r\n                }\r\n            }\r\n        });\r\n        // 关闭按钮\r\n        document\r\n            .querySelector('.centerWrap_close')\r\n            .addEventListener('click', () => {\r\n            this.close();\r\n        });\r\n        // 使用快捷键 Alt + x 切换中间面板显示隐藏\r\n        window.addEventListener('keydown', (ev) => {\r\n            if (ev.altKey && ev.keyCode === 88) {\r\n                const nowDisplay = this.centerPanel.style.display;\r\n                if (nowDisplay === 'block') {\r\n                    this.close();\r\n                }\r\n                else {\r\n                    this.show();\r\n                }\r\n            }\r\n        }, false);\r\n        // 点击右侧图标时，显示\r\n        window.addEventListener(EVT.events.clickRightIcon, () => {\r\n            this.show();\r\n        });\r\n        // 开始抓取作品时，隐藏\r\n        window.addEventListener(EVT.events.crawlStart, () => {\r\n            this.close();\r\n        });\r\n        // 抓取完作品详细数据时，显示\r\n        window.addEventListener(EVT.events.crawlFinish, () => {\r\n            this.show();\r\n        });\r\n        // 显示常见问题\r\n        document\r\n            .querySelector('.showDownTip')\r\n            .addEventListener('click', () => DOM.toggleEl(document.querySelector('.downTip')));\r\n        // 重置设置\r\n        document.getElementById('resetOption').addEventListener('click', () => {\r\n            const result = window.confirm(lang.transl('_是否重置设置'));\r\n            if (result) {\r\n                EVT.fire(EVT.events.resetOption);\r\n            }\r\n        });\r\n    }\r\n    // 显示中间区域\r\n    show() {\r\n        this.centerPanel.style.display = 'block';\r\n        EVT.fire(EVT.events.showCenterPanel);\r\n    }\r\n    // 隐藏中间区域\r\n    close() {\r\n        this.centerPanel.style.display = 'none';\r\n        EVT.fire(EVT.events.hideCenterPanel);\r\n    }\r\n}\r\nconst centerPanel = new CenterPanel();\r\nexport { centerPanel };\r\n","// 颜色\r\nclass Colors {\r\n}\r\nColors.blue = '#0ea8ef';\r\nColors.green = '#14ad27';\r\nColors.red = '#f33939';\r\nColors.yellow = '#e49d00';\r\nexport { Colors };\r\n","// DOM 操作类\r\n// 保存公用的 DOM 操作方法，以及从 DOM 中获取数据的 API\r\nclass DOM {\r\n    // 切换 DOM 元素的可见性\r\n    static toggleEl(el) {\r\n        el.style.display = el.style.display === 'block' ? 'none' : 'block';\r\n    }\r\n    // 将元素插入到页面顶部\r\n    /*\r\n    newindex-inner 是在未登录时的用户投稿列表页面使用的\r\n    layout-body 是在未登录时的搜索页使用的\r\n    */\r\n    static insertToHead(el) {\r\n        const insertPoint = document.body.querySelector('#root');\r\n        if (insertPoint) {\r\n            insertPoint.insertAdjacentElement('afterbegin', el);\r\n        }\r\n        return el;\r\n    }\r\n    static getUserId() {\r\n        const Reg = /creator\\/(\\d*)?/;\r\n        const testString = [location.href, document.head.innerHTML];\r\n        for (const string of testString) {\r\n            const result = Reg.exec(string);\r\n            if (result && result.length > 1) {\r\n                return result[1];\r\n            }\r\n        }\r\n        throw new Error('getUserId failed!');\r\n    }\r\n    // 动态添加 css 样式\r\n    static addStyle(css) {\r\n        const e = document.createElement('style');\r\n        e.innerHTML = css;\r\n        document.body.append(e);\r\n    }\r\n    // 寻找 slot，本程序使用的 slot 都要有 data-name 属性\r\n    static findSlot(name) {\r\n        const slot = document.querySelector(`slot[data-name=${name}]`);\r\n        if (!slot) {\r\n            throw new Error(`No such slot: ${name}`);\r\n        }\r\n        return slot;\r\n    }\r\n    // 使用指定的插槽\r\n    static useSlot(name, element) {\r\n        const slot = this.findSlot(name);\r\n        if (typeof element === 'string') {\r\n            // 插入字符串形式的元素\r\n            const wrap = document.createElement('div');\r\n            wrap.innerHTML = element;\r\n            const el = wrap.children[0];\r\n            slot.appendChild(el);\r\n            return el;\r\n        }\r\n        else {\r\n            // 插入 html 元素\r\n            slot.appendChild(element);\r\n            return element;\r\n        }\r\n    }\r\n    // 清空指定的插槽\r\n    static clearSlot(name) {\r\n        this.findSlot(name).innerHTML = '';\r\n    }\r\n    static addBtn(slot, bg = '', text = '', attr = []) {\r\n        const e = document.createElement('button');\r\n        e.type = 'button';\r\n        e.style.backgroundColor = bg;\r\n        e.textContent = text;\r\n        for (const [key, value] of attr) {\r\n            e.setAttribute(key, value);\r\n        }\r\n        this.useSlot(slot, e);\r\n        return e;\r\n    }\r\n}\r\nexport { DOM };\r\n","// 格式化日期（和时间）\r\nclass DateFormat {\r\n    // format 参数可以由以下格式组合：\r\n    /*\r\n    YYYY\r\n    YY\r\n    MM\r\n    MMM\r\n    MMMM\r\n    DD\r\n    hh\r\n    mm\r\n    ss\r\n    */\r\n    // 区分大小写；可以添加空格或其他符号；不要使用上面未包含的格式。\r\n    // 参考资料：\r\n    // https://www.w3.org/TR/NOTE-datetime\r\n    // https://en.wikipedia.org/wiki/Date_format_by_country\r\n    static format(date, format = 'YYYY-MM-DD') {\r\n        // 生成年、月、日、时、分、秒\r\n        const _date = new Date(date);\r\n        const YYYY = _date.getFullYear().toString();\r\n        const YY = YYYY.substring(YYYY.length - 2, YYYY.length);\r\n        const MM = (_date.getMonth() + 1).toString().padStart(2, '0');\r\n        const MMM = this.months[_date.getMonth()];\r\n        const MMMM = this.Months[_date.getMonth()];\r\n        const DD = _date.getDate().toString().padStart(2, '0');\r\n        const hh = _date.getHours().toString().padStart(2, '0');\r\n        const mm = _date.getMinutes().toString().padStart(2, '0');\r\n        const ss = _date.getSeconds().toString().padStart(2, '0');\r\n        // 对格式字符串进行替换\r\n        let r = format;\r\n        r = r.replace('YYYY', YYYY);\r\n        r = r.replace('YY', YY);\r\n        r = r.replace('MMMM', MMMM);\r\n        r = r.replace('MMM', MMM);\r\n        r = r.replace('MM', MM);\r\n        r = r.replace('DD', DD);\r\n        r = r.replace('hh', hh);\r\n        r = r.replace('mm', mm);\r\n        r = r.replace('ss', ss);\r\n        return r;\r\n    }\r\n}\r\nDateFormat.months = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sept',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec',\r\n];\r\nDateFormat.Months = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n];\r\nexport { DateFormat };\r\n","// 下载文件，并发送给浏览器下载\r\nimport { EVT } from './EVT';\r\nimport { titleBar } from './TitleBar';\r\nimport { fileName } from './FileName';\r\nimport { progressBar } from './ProgressBar';\r\nclass Download {\r\n    constructor(progressBarIndex, data) {\r\n        this.fileName = '';\r\n        this.stoped = false;\r\n        this.progressBarIndex = progressBarIndex;\r\n        this.arg = data;\r\n        this.download(data);\r\n        this.listenEvents();\r\n    }\r\n    listenEvents() {\r\n        ;\r\n        [EVT.events.downloadStop, EVT.events.downloadPause].forEach((event) => {\r\n            window.addEventListener(event, () => {\r\n                this.stoped = true;\r\n            });\r\n        });\r\n        window.addEventListener(EVT.events.downloadSucccess, (event) => {\r\n            const donwloadSuccessData = event.detail.data;\r\n            if (donwloadSuccessData.url === this.arg.data.url) {\r\n                this.setProgressBar(1024, 1024);\r\n            }\r\n        });\r\n    }\r\n    // 设置进度条信息\r\n    setProgressBar(loaded, total) {\r\n        progressBar.setProgress(this.progressBarIndex, {\r\n            name: this.fileName,\r\n            loaded: loaded,\r\n            total: total,\r\n        });\r\n    }\r\n    // 下载文件\r\n    download(arg) {\r\n        titleBar.change('↓');\r\n        // 获取文件名\r\n        this.fileName = fileName.getFileName(arg.data);\r\n        // 重设当前下载栏的信息\r\n        this.setProgressBar(0, 0);\r\n        // 向浏览器发送下载任务\r\n        this.browserDownload(arg.data.url, this.fileName, arg.id, arg.taskBatch);\r\n    }\r\n    // 向浏览器发送下载任务\r\n    browserDownload(url, fileName, id, taskBatch) {\r\n        // 如果任务已停止，不会向浏览器发送下载任务\r\n        // if (this.stoped) {\r\n        //   // 释放 bloburl\r\n        //   url.startsWith('blob') && URL.revokeObjectURL(url)\r\n        //   return\r\n        // }\r\n        const sendData = {\r\n            msg: 'send_download',\r\n            fileUrl: url,\r\n            fileName: fileName,\r\n            id,\r\n            taskBatch,\r\n        };\r\n        chrome.runtime.sendMessage(sendData);\r\n    }\r\n}\r\nexport { Download };\r\n","// 下载控制\r\nimport { EVT } from './EVT';\r\nimport { DOM } from './DOM';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nimport { lang } from './Lang';\r\nimport { titleBar } from './TitleBar';\r\nimport { Colors } from './Colors';\r\nimport { form } from './Settings';\r\nimport { Download } from './Download';\r\nimport { progressBar } from './ProgressBar';\r\nclass DownloadControl {\r\n    constructor() {\r\n        this.downloadThreadMax = 10; // 同时下载的线程数的最大值，也是默认值\r\n        this.downloadThread = 3; // 同时下载的线程数\r\n        this.taskBatch = 0; // 标记任务批次，每次重新下载时改变它的值，传递给后台使其知道这是一次新的下载\r\n        this.statesList = []; // 下载状态列表，保存每个下载任务的状态\r\n        this.taskList = {}; // 下载任务列表，使用下载的文件的 id 做 key，保存下载栏编号和它在下载状态列表中的索引\r\n        this.downloaded = 0; // 已下载的任务数量\r\n        this.reTryTimer = 0; // 重试下载的定时器\r\n        this.downloadArea = document.createElement('div'); // 下载区域\r\n        this.totalNumberEl = document.createElement('span');\r\n        this.downStatusEl = document.createElement('span');\r\n        this.downloadStop = false; // 是否停止下载\r\n        this.downloadPause = false; // 是否暂停下载\r\n        this.createDownloadArea();\r\n        this.listenEvents();\r\n    }\r\n    // 返回任务停止状态。暂停和停止都视为停止下载\r\n    get downloadStopped() {\r\n        return this.downloadPause || this.downloadStop;\r\n    }\r\n    listenEvents() {\r\n        window.addEventListener(EVT.events.crawlStart, () => {\r\n            this.hideDownloadArea();\r\n            this.reset();\r\n        });\r\n        window.addEventListener(EVT.events.crawlFinish, () => {\r\n            this.showDownloadArea();\r\n            this.beforeDownload();\r\n        });\r\n        window.addEventListener(EVT.events.skipSaveFile, (ev) => {\r\n            const data = ev.detail.data;\r\n            this.downloadSuccess(data);\r\n        });\r\n        // 监听浏览器下载文件后，返回的消息\r\n        chrome.runtime.onMessage.addListener((msg) => {\r\n            if (!this.taskBatch) {\r\n                return;\r\n            }\r\n            // 文件下载成功\r\n            if (msg.msg === 'downloaded') {\r\n                EVT.fire(EVT.events.downloadSucccess, msg.data);\r\n                this.downloadSuccess(msg.data);\r\n            }\r\n            else if (msg.msg === 'download_err') {\r\n                // 浏览器把文件保存到本地时出错\r\n                log.error(`${msg.data.url} Download error! Code: ${msg.err}. Will try again later.`);\r\n                EVT.fire(EVT.events.downloadError);\r\n                // 重新下载这个文件\r\n                this.downloadError(msg.data);\r\n            }\r\n            // UUID 的情况\r\n            if (msg.data && msg.data.uuid) {\r\n                log.error(lang.transl('_uuid'));\r\n            }\r\n        });\r\n    }\r\n    set setDownloaded(val) {\r\n        this.downloaded = val;\r\n        this.LogDownloadStates();\r\n        // 设置下载进度信息\r\n        this.totalNumberEl.textContent = store.result.length.toString();\r\n        progressBar.setTotalProgress(this.downloaded);\r\n        // 重置下载进度信息\r\n        if (this.downloaded === 0) {\r\n            this.setDownStateText(lang.transl('_未开始下载'));\r\n        }\r\n        // 下载完毕\r\n        if (this.downloaded === store.result.length) {\r\n            EVT.fire(EVT.events.downloadComplete);\r\n            this.reset();\r\n            this.setDownStateText(lang.transl('_下载完毕'));\r\n            log.success(lang.transl('_下载完毕'), 2);\r\n            titleBar.change('√');\r\n        }\r\n    }\r\n    downloadedAdd() {\r\n        this.setDownloaded = this.downloaded + 1;\r\n    }\r\n    // 显示或隐藏下载区域\r\n    showDownloadArea() {\r\n        this.downloadArea.style.display = 'block';\r\n    }\r\n    hideDownloadArea() {\r\n        this.downloadArea.style.display = 'none';\r\n    }\r\n    // 设置下载状态文本，默认颜色为主题蓝色\r\n    setDownStateText(str, color = '') {\r\n        const el = document.createElement('span');\r\n        el.textContent = str;\r\n        if (color) {\r\n            el.style.color = color;\r\n        }\r\n        this.downStatusEl.innerHTML = '';\r\n        this.downStatusEl.appendChild(el);\r\n    }\r\n    reset() {\r\n        this.statesList = [];\r\n        this.downloadPause = false;\r\n        this.downloadStop = false;\r\n        clearTimeout(this.reTryTimer);\r\n    }\r\n    createDownloadArea() {\r\n        const html = `<div class=\"download_area\">\r\n    <p> ${lang.transl('_共抓取到n个文件', '<span class=\"fwb blue imgNum\">0</span>')}</p>\r\n    \r\n    <div class=\"centerWrap_btns\">\r\n    <button class=\"startDownload\" type=\"button\" style=\"background:${Colors.blue};\"> ${lang.transl('_下载按钮1')}</button>\r\n    <button class=\"pauseDownload\" type=\"button\" style=\"background:#e49d00;\"> ${lang.transl('_下载按钮2')}</button>\r\n    <button class=\"stopDownload\" type=\"button\" style=\"background:${Colors.red};\"> ${lang.transl('_下载按钮3')}</button>\r\n    <button class=\"previewFileName\" type=\"button\" style=\"background:${Colors.green};\"> ${lang.transl('_预览文件名')}</button>\r\n    </div>\r\n    <div class=\"centerWrap_down_tips\">\r\n    <p>\r\n    ${lang.transl('_当前状态')}\r\n    <span class=\"down_status blue\"><span>${lang.transl('_未开始下载')}</span></span>\r\n    </p>\r\n    </div>\r\n    </div>`;\r\n        const el = DOM.useSlot('downloadArea', html);\r\n        this.downloadArea = el;\r\n        this.downStatusEl = el.querySelector('.down_status ');\r\n        this.totalNumberEl = el.querySelector('.imgNum');\r\n        document.querySelector('.startDownload').addEventListener('click', () => {\r\n            this.startDownload();\r\n        });\r\n        document.querySelector('.pauseDownload').addEventListener('click', () => {\r\n            this.pauseDownload();\r\n        });\r\n        document.querySelector('.stopDownload').addEventListener('click', () => {\r\n            this.stopDownload();\r\n        });\r\n        document\r\n            .querySelector('.previewFileName')\r\n            .addEventListener('click', () => {\r\n            EVT.fire(EVT.events.previewFileName);\r\n        });\r\n    }\r\n    // 下载线程设置\r\n    setDownloadThread() {\r\n        const setThread = parseInt(form.downloadThread.value);\r\n        if (setThread < 1 ||\r\n            setThread > this.downloadThreadMax ||\r\n            isNaN(setThread)) {\r\n            // 如果数值非法，则重设为默认值\r\n            this.downloadThread = this.downloadThreadMax;\r\n        }\r\n        else {\r\n            this.downloadThread = setThread; // 设置为用户输入的值\r\n        }\r\n        // 如果剩余任务数量少于下载线程数\r\n        if (store.result.length - this.downloaded < this.downloadThread) {\r\n            this.downloadThread = store.result.length - this.downloaded;\r\n        }\r\n        // 重设下载进度条\r\n        progressBar.reset(this.downloadThread, this.downloaded);\r\n    }\r\n    // 抓取完毕之后，已经可以开始下载时，根据一些状态进行处理\r\n    beforeDownload() {\r\n        this.setDownloaded = 0;\r\n        this.setDownloadThread();\r\n        const autoDownload = form.quietDownload.checked;\r\n        if (!autoDownload && !store.states.quickDownload) {\r\n            titleBar.change('▶');\r\n        }\r\n        // 视情况自动开始下载\r\n        if (autoDownload || store.states.quickDownload) {\r\n            this.startDownload();\r\n        }\r\n    }\r\n    // 开始下载\r\n    startDownload() {\r\n        // 如果正在下载中，或无图片，则不予处理\r\n        if (!store.states.allowWork || store.result.length === 0) {\r\n            return;\r\n        }\r\n        // 如果之前不是暂停状态，则需要重新下载\r\n        if (!this.downloadPause) {\r\n            this.setDownloaded = 0;\r\n            // 初始化下载记录\r\n            // 状态：\r\n            // -1 未使用\r\n            // 0 使用中\r\n            // 1 已完成\r\n            this.statesList = new Array(store.result.length).fill(-1);\r\n            this.taskBatch = new Date().getTime(); // 修改本批下载任务的标记\r\n        }\r\n        else {\r\n            // 继续下载\r\n            // 把“使用中”的下载状态重置为“未使用”\r\n            for (let index = 0; index < this.statesList.length; index++) {\r\n                if (this.statesList[index] === 0) {\r\n                    this.statesList[index] = -1;\r\n                }\r\n            }\r\n        }\r\n        // 重置一些条件\r\n        this.downloadPause = false;\r\n        this.downloadStop = false;\r\n        clearTimeout(this.reTryTimer);\r\n        this.setDownloadThread();\r\n        EVT.fire(EVT.events.downloadStart);\r\n        // 启动或继续下载，建立并发下载线程\r\n        for (let i = 0; i < this.downloadThread; i++) {\r\n            this.createDownload(i);\r\n        }\r\n        this.setDownStateText(lang.transl('_正在下载中'));\r\n        log.log(lang.transl('_正在下载中'));\r\n    }\r\n    // 暂停下载\r\n    pauseDownload() {\r\n        clearTimeout(this.reTryTimer);\r\n        if (store.result.length === 0) {\r\n            return;\r\n        }\r\n        // 停止的优先级高于暂停。点击停止可以取消暂停状态，但点击暂停不能取消停止状态\r\n        if (this.downloadStop === true) {\r\n            return;\r\n        }\r\n        if (this.downloadPause === false) {\r\n            // 如果正在下载中\r\n            if (!store.states.allowWork) {\r\n                this.downloadPause = true; // 发出暂停信号\r\n                EVT.fire(EVT.events.downloadPause);\r\n                titleBar.change('║');\r\n                this.setDownStateText(lang.transl('_已暂停'), '#f00');\r\n                log.warning(lang.transl('_已暂停'), 2);\r\n            }\r\n            else {\r\n                // 不在下载中的话不允许启用暂停功能\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    // 停止下载\r\n    stopDownload() {\r\n        clearTimeout(this.reTryTimer);\r\n        if (store.result.length === 0 || this.downloadStop) {\r\n            return;\r\n        }\r\n        this.downloadStop = true;\r\n        EVT.fire(EVT.events.downloadStop);\r\n        titleBar.change('■');\r\n        this.setDownStateText(lang.transl('_已停止'), '#f00');\r\n        log.error(lang.transl('_已停止'), 2);\r\n        this.downloadPause = false;\r\n    }\r\n    downloadError(data) {\r\n        if (this.downloadPause || this.downloadStop) {\r\n            return false;\r\n        }\r\n        const task = this.taskList[data.id];\r\n        // 复位这个任务的状态\r\n        this.setDownloadedIndex(task.index, -1);\r\n        // 建立下载任务，再次下载它\r\n        this.createDownload(task.progressBarIndex, true);\r\n    }\r\n    downloadSuccess(data) {\r\n        const task = this.taskList[data.id];\r\n        // 更改这个任务状态为“已完成”\r\n        this.setDownloadedIndex(task.index, 1);\r\n        // 增加已下载数量\r\n        this.downloadedAdd();\r\n        // 是否继续下载\r\n        const no = task.progressBarIndex;\r\n        if (this.checkContinueDownload()) {\r\n            this.createDownload(no);\r\n        }\r\n    }\r\n    // 设置已下载列表中的标记\r\n    setDownloadedIndex(index, value) {\r\n        this.statesList[index] = value;\r\n    }\r\n    // 当一个文件下载完成后，检查是否还有后续下载任务\r\n    checkContinueDownload() {\r\n        // 如果没有全部下载完毕\r\n        if (this.downloaded < store.result.length) {\r\n            // 如果任务已停止\r\n            if (this.downloadPause || this.downloadStop) {\r\n                return false;\r\n            }\r\n            // 如果已完成的数量 加上 线程中未完成的数量，仍然没有达到文件总数，继续添加任务\r\n            if (this.downloaded + this.downloadThread - 1 < store.result.length) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    // 在日志上显示下载进度\r\n    LogDownloadStates() {\r\n        let text = `${this.downloaded} / ${store.result.length}`;\r\n        log.log(text, 2, false);\r\n    }\r\n    // 查找需要进行下载的作品，建立下载\r\n    createDownload(progressBarIndex, hasFailed = false) {\r\n        let length = this.statesList.length;\r\n        let index;\r\n        for (let i = 0; i < length; i++) {\r\n            if (this.statesList[i] === -1) {\r\n                this.statesList[i] = 0;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if (index === undefined) {\r\n            throw new Error('There are no data to download');\r\n        }\r\n        else {\r\n            let result = store.result[index];\r\n            if (hasFailed && result.retryUrl) {\r\n                [result.url, result.retryUrl] = [result.retryUrl, result.url];\r\n            }\r\n            const data = {\r\n                id: result.fileId,\r\n                data: result,\r\n                index: index,\r\n                progressBarIndex: progressBarIndex,\r\n                taskBatch: this.taskBatch,\r\n            };\r\n            // 保存任务信息\r\n            this.taskList[data.data.fileId] = {\r\n                index,\r\n                progressBarIndex: progressBarIndex,\r\n            };\r\n            // 建立下载\r\n            new Download(progressBarIndex, data);\r\n        }\r\n    }\r\n}\r\nnew DownloadControl();\r\n","class EVT {\r\n    static fire(type, data = '') {\r\n        const event = new CustomEvent(type, {\r\n            detail: { data: data },\r\n        });\r\n        window.dispatchEvent(event);\r\n    }\r\n}\r\nEVT.events = {\r\n    crawlStart: 'crawlStart',\r\n    crawlFinish: 'crawlFinish',\r\n    crawlEmpty: 'crawlEmpty',\r\n    crawlError: 'crawlError',\r\n    addResult: 'addResult',\r\n    downloadStart: 'downloadStart',\r\n    downloadPause: 'downloadPause',\r\n    downloadStop: 'downloadStop',\r\n    download: 'download',\r\n    downloadSucccess: 'downloadSucccess',\r\n    downloadError: 'downloadError',\r\n    downloadComplete: 'downloadComplete',\r\n    pageSwitch: 'pageSwitch',\r\n    pageTypeChange: 'pageTypeChange',\r\n    resetOption: 'resetOption',\r\n    convertChange: 'convertChange',\r\n    previewFileName: 'previewFileName',\r\n    output: 'output',\r\n    hideCenterPanel: 'hideCenterPanel',\r\n    showCenterPanel: 'showCenterPanel',\r\n    clearMultiple: 'clearMultiple',\r\n    clearUgoira: 'clearUgoira',\r\n    deleteWork: 'deleteWork',\r\n    worksUpdate: 'worksUpdate',\r\n    settingChange: 'settingChange',\r\n    clickRightIcon: 'clickRightIcon',\r\n    destroy: 'destroy',\r\n    convertError: 'convertError',\r\n    skipSaveFile: 'skipSaveFile',\r\n};\r\nexport { EVT };\r\n","import { EVT } from './EVT';\r\nimport { form } from './Settings';\r\nimport { store } from './Store';\r\nimport { lang } from './Lang';\r\nimport { DateFormat } from './DateFormat';\r\nclass FileName {\r\n    constructor() {\r\n        // 用正则过滤不安全的字符，（Chrome 和 Windows 不允许做文件名的字符）\r\n        // 不安全的字符，这里多数是控制字符，需要替换掉\r\n        this.unsafeStr = new RegExp(/[\\u0001-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0605\\u061c\\u06dd\\u070f\\u08e2\\u180e\\u200b-\\u200f\\u202a-\\u202e\\u2060-\\u2064\\u2066-\\u206f\\ufdd0-\\ufdef\\ufeff\\ufff9-\\ufffb\\ufffe\\uffff]/g);\r\n        // 一些需要替换成全角字符的符号，左边是正则表达式的字符\r\n        this.fullWidthDict = [\r\n            ['\\\\\\\\', '＼'],\r\n            ['/', '／'],\r\n            [':', '：'],\r\n            ['\\\\?', '？'],\r\n            ['\"', '＂'],\r\n            ['<', '＜'],\r\n            ['>', '＞'],\r\n            ['\\\\*', '＊'],\r\n            ['\\\\|', '｜'],\r\n            ['~', '～'],\r\n        ];\r\n        window.addEventListener(EVT.events.previewFileName, () => {\r\n            this.previewFileName();\r\n        });\r\n    }\r\n    // 把一些特殊字符替换成全角字符\r\n    replaceUnsafeStr(str) {\r\n        str = str.replace(this.unsafeStr, '');\r\n        for (let index = 0; index < this.fullWidthDict.length; index++) {\r\n            const rule = this.fullWidthDict[index];\r\n            const reg = new RegExp(rule[0], 'g');\r\n            str = str.replace(reg, rule[1]);\r\n        }\r\n        return str;\r\n    }\r\n    transDate(date) {\r\n        // 时间原数据如 \"2019-12-18T22:23:37+00:00\"\r\n        // 网页上显示的日期是转换成了本地时间的，如北京时区显示为 \"2019-12-19\"，不是显示原始日期 \"2019-12-18\"。所以这里转换成本地时区的日期，和网页上保持一致，以免用户困惑。\r\n        const date0 = new Date(date);\r\n        const y = date0.getFullYear();\r\n        const M = (date0.getMonth() + 1).toString().padStart(2, '0');\r\n        const d = date0.getDate().toString().padStart(2, '0');\r\n        const h = date0.getHours().toString().padStart(2, '0');\r\n        const m = date0.getMinutes().toString().padStart(2, '0');\r\n        return `${y}-${M}-${d} ${h}-${m}`;\r\n    }\r\n    // 生成文件名，传入参数为图片信息\r\n    getFileName(data) {\r\n        let result = form.userSetName.value;\r\n        // 为空时使用预设的命名规则\r\n        result = result || store.defaultFileName;\r\n        // 配置所有命名标记\r\n        const cfg = {\r\n            '{postid}': {\r\n                value: data.postId,\r\n                safe: true,\r\n            },\r\n            '{title}': {\r\n                value: data.title,\r\n                safe: false,\r\n            },\r\n            '{name}': {\r\n                value: data.name,\r\n                safe: false,\r\n            },\r\n            '{ext}': {\r\n                value: data.ext,\r\n                safe: false,\r\n            },\r\n            '{index}': {\r\n                value: data.index,\r\n                safe: false,\r\n            },\r\n            '{tags}': {\r\n                value: data.tags,\r\n                safe: false,\r\n            },\r\n            '{date}': {\r\n                value: DateFormat.format(data.date, form.dateFormat.value),\r\n                safe: false,\r\n            },\r\n            '{task_date}': {\r\n                value: DateFormat.format(store.crawlCompleteTime, form.dateFormat.value),\r\n                prefix: '',\r\n                safe: false,\r\n            },\r\n            '{fee}': {\r\n                value: data.fee,\r\n                safe: true,\r\n            },\r\n            '{user}': {\r\n                value: data.user,\r\n                safe: false,\r\n            },\r\n            '{uid}': {\r\n                value: data.uid,\r\n                safe: true,\r\n            },\r\n        };\r\n        // 替换命名规则里的特殊字符\r\n        result = this.replaceUnsafeStr(result);\r\n        // 上一步会把斜线 / 替换成全角的斜线 ／，这里再替换回来，否则就不能建立文件夹了\r\n        result = result.replace(/／/g, '/');\r\n        // 把命名规则的标记替换成实际值\r\n        for (const [key, val] of Object.entries(cfg)) {\r\n            // 只有当标记有值时才会进行替换，所以没有值的标记会原样保留\r\n            if (result.includes(key) && val.value !== '' && val.value !== null) {\r\n                let once = String(val.value);\r\n                // 处理标记值中的特殊字符\r\n                if (!val.safe) {\r\n                    once = this.replaceUnsafeStr(once);\r\n                }\r\n                result = result.replace(new RegExp(key, 'g'), once); // 将标记替换成最终值，如果有重复的标记，全部替换\r\n            }\r\n        }\r\n        // 处理空值，连续的 '//'。 有时候两个斜线中间的字段是空值，最后就变成两个斜线挨在一起了\r\n        result = result.replace(/undefined/g, '').replace(/\\/{2,9}/, '/');\r\n        // 对每一层路径进行处理\r\n        let tempArr = result.split('/');\r\n        tempArr.forEach((str, index, arr) => {\r\n            // 替换路径首尾的空格\r\n            // 把每层路径头尾的 . 变成全角的．因为 Chrome 不允许头尾使用 .\r\n            arr[index] = str.trim().replace(/^\\./g, '．').replace(/\\.$/g, '．');\r\n        });\r\n        result = tempArr.join('/');\r\n        // 去掉头尾的 /\r\n        if (result.startsWith('/')) {\r\n            result = result.replace('/', '');\r\n        }\r\n        if (result.endsWith('/')) {\r\n            result = result.substr(0, result.length - 1);\r\n        }\r\n        // 添加后缀名\r\n        result += '.' + data.ext;\r\n        return result;\r\n    }\r\n    // 预览文件名\r\n    previewFileName() {\r\n        if (store.result.length === 0) {\r\n            return alert(lang.transl('_没有数据可供使用'));\r\n        }\r\n        // 使用数组储存和拼接字符串，提高性能\r\n        const resultArr = [];\r\n        const length = store.result.length;\r\n        for (let i = 0; i < length; i++) {\r\n            const data = store.result[i];\r\n            // 为生成的文件名添加颜色\r\n            const fullName = this.getFileName(data);\r\n            const part = fullName.split('/');\r\n            const length = part.length;\r\n            for (let i = 0; i < length; i++) {\r\n                const str = part[i];\r\n                if (i < length - 1) {\r\n                    // 如果不是最后一项，说明是文件夹名，添加颜色\r\n                    part[i] = `<span class=\"color666\">${str}</span>`;\r\n                }\r\n                else {\r\n                    // 最后一项，是文件名，添加颜色\r\n                    part[i] = `<span class=\"color000\">${str}</span>`;\r\n                }\r\n            }\r\n            const fullNameHtml = part.join('/');\r\n            // 保存本条结果\r\n            const nowResult = `<p class=\"result\">${fullNameHtml}</p>`;\r\n            resultArr.push(nowResult);\r\n        }\r\n        // 拼接所有结果\r\n        const result = resultArr.join('');\r\n        EVT.fire(EVT.events.output, result);\r\n    }\r\n}\r\nconst fileName = new FileName();\r\nexport { fileName };\r\n","import { form } from './Settings';\r\nimport { log } from './Log';\r\nimport { EVT } from './EVT';\r\nimport { store } from './Store';\r\n// 审查每个文件的数据，决定是否要下载它\r\nclass Filter {\r\n    constructor() {\r\n        this._postDateStart = 0;\r\n        this._postDateEnd = 0;\r\n    }\r\n    init() {\r\n        this.getIdRange();\r\n        this.getDateRange();\r\n    }\r\n    // 获取 id 范围设置\r\n    getIdRange() {\r\n        if (form.idRangeSwitch.checked) {\r\n            let id = parseInt(form.idRangeInput.value);\r\n            if (isNaN(id)) {\r\n                EVT.fire(EVT.events.crawlError);\r\n                const msg = 'id is not a number!';\r\n                window.alert(msg);\r\n                log.error(msg);\r\n                throw new Error(msg);\r\n            }\r\n        }\r\n    }\r\n    getDateRange() {\r\n        if (!form.postDate.checked ||\r\n            form.postDateStart.value === '' ||\r\n            form.postDateEnd.value === '') {\r\n            return;\r\n        }\r\n        // 判断是否是有效的时间格式\r\n        const postDateStart = new Date(form.postDateStart.value);\r\n        const postDateEnd = new Date(form.postDateEnd.value);\r\n        // 如果输入的时间可以被转换成有效的时间，则启用\r\n        // 转换时间失败时，值是 Invalid Date，不能转换成数字\r\n        if (isNaN(postDateStart.getTime()) || isNaN(postDateEnd.getTime())) {\r\n            const msg = 'Date format error!';\r\n            this.throwError(msg);\r\n        }\r\n        else {\r\n            // 转换时间成功\r\n            this._postDateStart = postDateStart.getTime();\r\n            this._postDateEnd = postDateEnd.getTime();\r\n        }\r\n    }\r\n    // 检查作品是否符合过滤器的要求\r\n    // 想要检查哪些数据就传递哪些数据，不需要传递 FilterOption 的所有选项\r\n    check(option) {\r\n        // 检查文件类型\r\n        if (!this.checkFileType(option.ext)) {\r\n            return false;\r\n        }\r\n        // 检查收费还是免费\r\n        if (!this.checkfeeType(option.fee)) {\r\n            return false;\r\n        }\r\n        // 检查价格范围\r\n        if (!this.checkfeeRange(option.fee)) {\r\n            return false;\r\n        }\r\n        // 检查 id 范围\r\n        if (!this.checkIdRange(option.id)) {\r\n            return false;\r\n        }\r\n        // 检查投稿时间\r\n        if (!this.checkPostDate(option.date)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    checkFileType(ext) {\r\n        // 如果没有传递 ext，则保留这个文件\r\n        if (!ext) {\r\n            return true;\r\n        }\r\n        // 检查 ext 存在于哪种类型里，然后检查这个类型是否被选中\r\n        for (const [key, value] of Object.entries(store.fileType)) {\r\n            if (value.includes(ext)) {\r\n                return form[key].checked ? true : false;\r\n            }\r\n        }\r\n        // 如果这个 ext 不存在任何规定的类型里，则把它当作 other 类型，决定是否保留\r\n        return form['other'].checked ? true : false;\r\n    }\r\n    checkfeeType(fee) {\r\n        if (fee === undefined) {\r\n            return true;\r\n        }\r\n        if (fee > 0) {\r\n            return form.pay.checked;\r\n        }\r\n        else {\r\n            return form.free.checked;\r\n        }\r\n    }\r\n    checkfeeRange(fee) {\r\n        if (fee === undefined || !form.feeSwitch.checked) {\r\n            return true;\r\n        }\r\n        return fee >= parseInt(form.fee.value);\r\n    }\r\n    checkIdRange(id) {\r\n        if (id === undefined || !form.idRangeSwitch.checked) {\r\n            return true;\r\n        }\r\n        const flag = parseInt(form.idRange.value);\r\n        const nowId = parseInt(id.toString());\r\n        const setId = parseInt(form.idRangeInput.value);\r\n        if (flag === 1) {\r\n            // 大于\r\n            return nowId > setId;\r\n        }\r\n        else if (flag === 2) {\r\n            // 小于\r\n            return nowId < setId;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    checkPostDate(date) {\r\n        if (!form.postDate.checked ||\r\n            date === undefined ||\r\n            !this._postDateStart ||\r\n            !this._postDateEnd) {\r\n            return true;\r\n        }\r\n        const nowDate = new Date(date);\r\n        return (nowDate.getTime() >= this._postDateStart &&\r\n            nowDate.getTime() <= this._postDateEnd);\r\n    }\r\n    // 当需要时抛出错误\r\n    throwError(msg) {\r\n        EVT.fire(EVT.events.crawlError);\r\n        log.error(msg, 2);\r\n        window.alert(msg);\r\n        throw new Error(msg);\r\n    }\r\n}\r\nconst filter = new Filter();\r\nexport { filter };\r\n","import { lang } from './Lang';\r\nimport { Colors } from './Colors';\r\nimport { DOM } from './DOM';\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nclass InitHomePage extends InitPageBase {\r\n    constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n    // 添加中间按钮\r\n    appendCenterBtns() {\r\n        DOM.addBtn('crawlBtns', Colors.blue, lang.transl('_抓取赞助的所有用户的投稿')).addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n    }\r\n    async FetchPostList() {\r\n        let data;\r\n        if (this.nextUrl) {\r\n            data = (await API.request(this.nextUrl));\r\n        }\r\n        else {\r\n            data = await API.getPostListSupporting(300);\r\n        }\r\n        this.afterFetchPostList(data);\r\n    }\r\n    async fetchPost() { }\r\n}\r\nexport { InitHomePage };\r\n","// 初始化页面，初始化抓取流程\r\nimport { EVT } from './EVT';\r\nimport { pageType } from './PageType';\r\nimport { InitHomePage } from './InitHomePage';\r\nimport { InitPostListPage } from './InitPostListPage';\r\nimport { InitTagPage } from './InitTagPage';\r\nimport { InitPostPage } from './InitPostPage';\r\nclass InitPage {\r\n    constructor() {\r\n        this.initPage();\r\n        // 页面类型变化时，初始化抓取流程\r\n        window.addEventListener(EVT.events.pageTypeChange, () => {\r\n            EVT.fire(EVT.events.destroy);\r\n            this.initPage();\r\n        });\r\n    }\r\n    initPage() {\r\n        switch (pageType.getPageType()) {\r\n            case 0:\r\n            case 1:\r\n                return new InitHomePage();\r\n            case 2:\r\n            case 3:\r\n                return new InitPostListPage();\r\n            case 4:\r\n                return new InitPostPage();\r\n            case 5:\r\n                return new InitTagPage();\r\n            default:\r\n                throw new Error('InitCrawlProcess error: Illegal pageType.');\r\n        }\r\n    }\r\n}\r\nnew InitPage();\r\n","// 初始化抓取页面的流程\r\nimport { lang } from './Lang';\r\nimport { DOM } from './DOM';\r\nimport { filter } from './Filter';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nimport { EVT } from './EVT';\r\nimport { titleBar } from './TitleBar';\r\nimport { saveData } from './SaveData';\r\nclass InitPageBase {\r\n    constructor() {\r\n        this.crawlNumber = 0; // 要抓取的个数/页数\r\n        this.nextUrl = null;\r\n    }\r\n    // 初始化\r\n    init() {\r\n        this.appendCenterBtns();\r\n        this.appendElseEl();\r\n        this.initElse();\r\n        window.addEventListener(EVT.events.destroy, () => {\r\n            this.destroy();\r\n        });\r\n    }\r\n    // 各个子类私有的初始化内容\r\n    initElse() { }\r\n    // 销毁初始化页面时添加的元素和事件，恢复设置项等\r\n    destroy() {\r\n        DOM.clearSlot('crawlBtns');\r\n    }\r\n    // 添加中间按钮\r\n    appendCenterBtns() { }\r\n    // 添加其他元素（如果有）\r\n    appendElseEl() { }\r\n    // 准备抓取，进行抓取之前的一些检查工作。必要时可以在子类中改写\r\n    async readyCrawl() {\r\n        if (!store.states.allowWork) {\r\n            window.alert(lang.transl('_当前任务尚未完成2'));\r\n            return;\r\n        }\r\n        EVT.fire(EVT.events.crawlStart);\r\n        log.clear();\r\n        log.success(lang.transl('_任务开始0'));\r\n        titleBar.change('↑');\r\n        filter.init();\r\n        // 进入第一个抓取方法\r\n        this.nextStep();\r\n    }\r\n    // 当可以开始抓取时，进入下一个流程。默认情况下，开始获取作品列表。如有不同，由子类具体定义\r\n    nextStep() {\r\n        this.FetchPostList();\r\n    }\r\n    afterFetchPostList(data) {\r\n        const items = data.body.items;\r\n        this.nextUrl = data.body.nextUrl;\r\n        for (const item of items) {\r\n            saveData.receive(item);\r\n        }\r\n        if (this.nextUrl) {\r\n            this.FetchPostList();\r\n        }\r\n        else {\r\n            this.crawlFinished();\r\n        }\r\n    }\r\n    afterFetchPost(data) {\r\n        saveData.receive(data.body);\r\n        this.crawlFinished();\r\n    }\r\n    // 抓取完毕\r\n    crawlFinished() {\r\n        if (store.result.length === 0) {\r\n            return this.noResult();\r\n        }\r\n        this.nextUrl = null;\r\n        store.crawlCompleteTime = new Date();\r\n        log.log(lang.transl('_抓取文件数量', store.result.length.toString()));\r\n        log.log(lang.transl('_抓取完毕'), 2);\r\n        EVT.fire(EVT.events.crawlFinish);\r\n    }\r\n    // 抓取结果为 0 时输出提示\r\n    noResult() {\r\n        EVT.fire(EVT.events.crawlEmpty);\r\n        titleBar.reset();\r\n        log.error(lang.transl('_抓取结果为零'), 2);\r\n        window.alert(lang.transl('_抓取结果为零'));\r\n    }\r\n}\r\nexport { InitPageBase };\r\n","import { lang } from './Lang';\r\nimport { Colors } from './Colors';\r\nimport { DOM } from './DOM';\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nclass InitPostListPage extends InitPageBase {\r\n    constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n    // 添加中间按钮\r\n    appendCenterBtns() {\r\n        DOM.addBtn('crawlBtns', Colors.blue, lang.transl('_抓取该用户的投稿')).addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n    }\r\n    async FetchPostList() {\r\n        let data;\r\n        if (this.nextUrl) {\r\n            data = (await API.request(this.nextUrl));\r\n        }\r\n        else {\r\n            data = await API.getPostListByUser(API.getCreatorId(location.href), 300);\r\n        }\r\n        this.afterFetchPostList(data);\r\n    }\r\n    async fetchPost() { }\r\n}\r\nexport { InitPostListPage };\r\n","import { lang } from './Lang';\r\nimport { Colors } from './Colors';\r\nimport { DOM } from './DOM';\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nimport { store } from './Store';\r\nclass InitPostPage extends InitPageBase {\r\n    constructor() {\r\n        super();\r\n        this.quickDownBtn = document.createElement('div');\r\n        this.init();\r\n    }\r\n    // 添加中间按钮\r\n    appendCenterBtns() {\r\n        DOM.addBtn('crawlBtns', Colors.blue, lang.transl('_抓取这篇投稿')).addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n    }\r\n    appendElseEl() {\r\n        // 在右侧创建快速下载按钮\r\n        this.quickDownBtn.id = 'quick_down_btn';\r\n        this.quickDownBtn.textContent = '↓';\r\n        this.quickDownBtn.setAttribute('title', lang.transl('_快速下载本页'));\r\n        document.body.appendChild(this.quickDownBtn);\r\n        this.quickDownBtn.addEventListener('click', () => {\r\n            store.states.quickDownload = true;\r\n            this.readyCrawl();\r\n        }, false);\r\n    }\r\n    destroy() {\r\n        DOM.clearSlot('crawlBtns');\r\n        // 删除快速下载按钮\r\n        const quickBtn = document.querySelector('#quick_down_btn');\r\n        quickBtn && quickBtn.remove();\r\n    }\r\n    nextStep() {\r\n        this.fetchPost();\r\n    }\r\n    async FetchPostList() { }\r\n    async fetchPost() {\r\n        const data = await API.getPost(API.getURLPathField('posts'));\r\n        this.afterFetchPost(data);\r\n    }\r\n}\r\nexport { InitPostPage };\r\n","import { lang } from './Lang';\r\nimport { Colors } from './Colors';\r\nimport { DOM } from './DOM';\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nclass InitTagPage extends InitPageBase {\r\n    constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n    // 添加中间按钮\r\n    appendCenterBtns() {\r\n        DOM.addBtn('crawlBtns', Colors.blue, lang.transl('_抓取该tag的投稿')).addEventListener('click', () => {\r\n            this.readyCrawl();\r\n        });\r\n    }\r\n    async FetchPostList() {\r\n        let data;\r\n        if (this.nextUrl) {\r\n            data = (await API.request(this.nextUrl));\r\n        }\r\n        else {\r\n            data = await API.getTagPostListByUser(await API.getUserId(API.getCreatorId(location.href)), API.getURLPathField('tags'));\r\n        }\r\n        this.afterFetchPostList(data);\r\n    }\r\n    async fetchPost() { }\r\n}\r\nexport { InitTagPage };\r\n","import { langText } from './langText';\r\n// 语言类\r\nclass Lang {\r\n    constructor() {\r\n        this.langType = 0;\r\n        this.getLangType();\r\n    }\r\n    // 设置语言类型\r\n    getLangType() {\r\n        const userLang = document.documentElement.lang; // 获取语言标识\r\n        switch (userLang) {\r\n            case 'zh':\r\n            case 'zh-CN':\r\n            case 'zh-Hans':\r\n                this.langType = 0; // 设置为简体中文\r\n                break;\r\n            case 'ja':\r\n                this.langType = 1; // 设置为日语\r\n                break;\r\n            case 'zh-Hant':\r\n            case 'zh-tw':\r\n            case 'zh-TW':\r\n                this.langType = 3; // 设置为繁体中文\r\n                break;\r\n            default:\r\n                this.langType = 2; // 设置为英语\r\n                break;\r\n        }\r\n    }\r\n    // translate 翻译\r\n    transl(name, ...arg) {\r\n        let content = langText[name][this.langType];\r\n        arg.forEach((val) => (content = content.replace('{}', val)));\r\n        return content;\r\n    }\r\n}\r\nconst lang = new Lang();\r\nexport { lang };\r\n","import { DOM } from './DOM';\r\nimport { EVT } from './EVT';\r\nimport { store } from './Store';\r\n// 日志类\r\nclass Log {\r\n    constructor() {\r\n        this.logArea = document.createElement('div'); // 输出日志的区域\r\n        this.id = 'logWrap'; // 日志区域元素的 id\r\n        this.refresh = document.createElement('span'); // 刷新时使用的元素\r\n        this.colors = ['#00ca19', '#d27e00', '#f00'];\r\n        // 切换不同页面时，如果任务已经完成，则清空输出区域，避免日志一直堆积。\r\n        window.addEventListener(EVT.events.destroy, () => {\r\n            if (store.states.allowWork) {\r\n                this.clear();\r\n            }\r\n        });\r\n    }\r\n    // 如果日志元素没有添加到页面上，则添加上去\r\n    checkElement() {\r\n        let test = document.getElementById(this.id);\r\n        if (test === null) {\r\n            this.logArea.id = this.id;\r\n            DOM.insertToHead(this.logArea);\r\n        }\r\n    }\r\n    // 清空日志\r\n    clear() {\r\n        this.logArea.innerHTML = '';\r\n    }\r\n    // 添加日志\r\n    /*\r\n    str 日志文本\r\n    level 日志等级\r\n    br 换行标签的个数\r\n    keepShow 追加日志的模式，默认为 true，把这一条日志添加后不再修改。false 则是刷新显示这条消息。\r\n  \r\n    level 日志等级：\r\n    -1 auto 不设置颜色\r\n    0 success 绿色\r\n    1 warning 黄色\r\n    2 error 红色\r\n    */\r\n    add(str, level, br, keepShow) {\r\n        let span = document.createElement('span');\r\n        if (!keepShow) {\r\n            span = this.refresh;\r\n        }\r\n        span.innerHTML = str;\r\n        if (level > -1) {\r\n            span.style.color = this.colors[level];\r\n        }\r\n        while (br > 0) {\r\n            span.appendChild(document.createElement('br'));\r\n            br--;\r\n        }\r\n        this.logArea.appendChild(span);\r\n    }\r\n    log(str, br = 1, keepShow = true) {\r\n        this.checkElement();\r\n        this.add(str, -1, br, keepShow);\r\n    }\r\n    success(str, br = 1, keepShow = true) {\r\n        this.checkElement();\r\n        this.add(str, 0, br, keepShow);\r\n    }\r\n    warning(str, br = 1, keepShow = true) {\r\n        this.add(str, 1, br, keepShow);\r\n    }\r\n    error(str, br = 1, keepShow = true) {\r\n        this.add(str, 2, br, keepShow);\r\n    }\r\n}\r\nconst log = new Log();\r\nexport { log };\r\n","// 输出传递的文本\r\nimport { EVT } from './EVT';\r\nimport { lang } from './Lang';\r\nclass Output {\r\n    constructor() {\r\n        this.outputPanel = document.createElement('div'); // 输出面板\r\n        this.outputContent = document.createElement('div'); // 输出文本的容器元素\r\n        this.addOutPutPanel();\r\n        this.bindEvent();\r\n    }\r\n    // 添加输出面板\r\n    addOutPutPanel() {\r\n        const outputPanelHTML = `\r\n    <div class=\"outputWrap\">\r\n    <div class=\"outputClose\" title=\"${lang.transl('_关闭')}\">X</div>\r\n    <div class=\"outputTitle\">${lang.transl('_输出信息')}</div>\r\n    <div class=\"outputContent\"></div>\r\n    <div class=\"outputFooter\">\r\n    <div class=\"outputCopy\" title=\"\">${lang.transl('_复制')}</div>\r\n    </div>\r\n    </div>\r\n    `;\r\n        document.body.insertAdjacentHTML('beforeend', outputPanelHTML);\r\n        this.outputPanel = document.querySelector('.outputWrap');\r\n        this.outputContent = document.querySelector('.outputContent');\r\n    }\r\n    close() {\r\n        this.outputPanel.style.display = 'none';\r\n        this.outputContent.innerHTML = '';\r\n    }\r\n    bindEvent() {\r\n        // 关闭输出面板\r\n        document.querySelector('.outputClose').addEventListener('click', () => {\r\n            this.close();\r\n        });\r\n        window.addEventListener(EVT.events.hideCenterPanel, () => {\r\n            this.close();\r\n        });\r\n        // 复制输出内容\r\n        document.querySelector('.outputCopy').addEventListener('click', () => {\r\n            const range = document.createRange();\r\n            range.selectNodeContents(this.outputContent);\r\n            window.getSelection().removeAllRanges();\r\n            window.getSelection().addRange(range);\r\n            document.execCommand('copy');\r\n            // 改变提示文字\r\n            document.querySelector('.outputCopy').textContent = lang.transl('_已复制到剪贴板');\r\n            setTimeout(() => {\r\n                window.getSelection().removeAllRanges();\r\n                document.querySelector('.outputCopy').textContent = lang.transl('_复制');\r\n            }, 1000);\r\n        });\r\n        window.addEventListener(EVT.events.output, (ev) => {\r\n            this.output(ev.detail.data);\r\n        });\r\n    }\r\n    // 输出内容\r\n    output(text) {\r\n        if (text) {\r\n            this.outputContent.innerHTML = text;\r\n            this.outputPanel.style.display = 'block';\r\n        }\r\n    }\r\n}\r\nnew Output();\r\n","// 获取页面类型\r\nimport { EVT } from './EVT';\r\nclass PageType {\r\n    constructor() {\r\n        this.type = 0;\r\n        this.type = this.getPageType();\r\n        // 页面切换时检查新旧页面是否不同\r\n        window.addEventListener(EVT.events.pageSwitch, () => {\r\n            this.checkPageTypeIsNew();\r\n        });\r\n    }\r\n    // 判断页面类型\r\n    getPageType() {\r\n        let type;\r\n        const host = window.location.hostname;\r\n        const path = window.location.pathname;\r\n        const userPage = (!host.startsWith('www.') &&\r\n            !host.startsWith('api.') &&\r\n            !host.startsWith('downloads.')) ||\r\n            path.startsWith('/@');\r\n        if (host === 'www.fanbox.cc' && path === '/') {\r\n            // https://www.fanbox.cc/\r\n            // 自己主页\r\n            type = 0;\r\n        }\r\n        else if (path === '/home/supporting') {\r\n            // https://www.fanbox.cc/home/supporting\r\n            // 正在赞助\r\n            type = 1;\r\n        }\r\n        else if (userPage &&\r\n            !path.includes('/posts') &&\r\n            !path.includes('/tags/') &&\r\n            !path.includes('/shop')) {\r\n            // https://kyomoneko.fanbox.cc/\r\n            // https://www.fanbox.cc/@official\r\n            // 画师主页\r\n            type = 2;\r\n        }\r\n        else if (userPage && path.endsWith('/posts')) {\r\n            // https://kyomoneko.fanbox.cc/posts\r\n            // https://www.fanbox.cc/@official/posts\r\n            // 画师投稿列表页\r\n            type = 3;\r\n        }\r\n        else if (userPage && path.includes('/posts/')) {\r\n            // https://kyomoneko.fanbox.cc/posts/904593\r\n            // https://www.fanbox.cc/@official/posts/996286\r\n            // 投稿内容页\r\n            type = 4;\r\n        }\r\n        else if (userPage && path.includes('/tags/')) {\r\n            // https://eto13.fanbox.cc/tags/%E5%8B%95%E7%94%BB\r\n            // tag 页面\r\n            type = 5;\r\n        }\r\n        else if (userPage && path.endsWith('/shop')) {\r\n            // https://yajirushikey.fanbox.cc/shop\r\n            // 商店页面\r\n            type = 6;\r\n        }\r\n        else {\r\n            // 没有匹配到可用的页面类型\r\n            throw new Error('Page type matching failed');\r\n        }\r\n        return type;\r\n    }\r\n    // 检查是不是进入到了新的页面类型\r\n    checkPageTypeIsNew() {\r\n        let newType = this.getPageType();\r\n        if (this.type !== newType) {\r\n            EVT.fire(EVT.events.pageTypeChange, newType);\r\n        }\r\n        // 保存当前页面类型\r\n        this.type = newType;\r\n    }\r\n}\r\nconst pageType = new PageType();\r\nexport { pageType };\r\n","import { store } from './Store';\r\nimport { DOM } from './DOM';\r\nimport { lang } from './Lang';\r\n// 进度条\r\nclass ProgressBar {\r\n    constructor() {\r\n        this.wrapHTML = `\r\n  <div class=\"progressBarWrap\">\r\n  <div class=\"total\">\r\n  <span class=\"text\">${lang.transl('_下载进度')}</span>\r\n  <div class=\"right1\">\r\n  <div class=\"progressBar progressBar1\">\r\n  <div class=\"progress progress1\"></div>\r\n  </div>\r\n  <div class=\"progressTip progressTip1\">\r\n  <span class=\"downloaded\">0</span>\r\n  /\r\n  <span class=\"imgNum totalNumber\">0</span>\r\n  </div>\r\n  </div>\r\n  </div>\r\n\r\n  <ul class=\"progressBarList\"></ul>\r\n  </div>\r\n  `;\r\n        this.barHTML = `<li class=\"downloadBar\">\r\n  <div class=\"progressBar progressBar2\">\r\n  <div class=\"progress progress2\"></div>\r\n  </div>\r\n  <div class=\"progressTip progressTip2\">\r\n  <span class=\"fileName\"></span>\r\n  </div>\r\n  </li>`;\r\n        this.allProgressBar = [];\r\n        this.wrap = DOM.useSlot('progressBar', this.wrapHTML);\r\n        this.downloadedEl = this.wrap.querySelector('.downloaded');\r\n        this.progressColorEl = this.wrap.querySelector('.progress1');\r\n        this.listWrap = this.wrap.querySelector('.progressBarList');\r\n        this.totalNumberEl = this.wrap.querySelector('.totalNumber');\r\n    }\r\n    // 重设所有进度\r\n    reset(num, downloaded = 0) {\r\n        // 重置总进度条\r\n        this.setTotalProgress(downloaded);\r\n        this.totalNumberEl.textContent = store.result.length.toString();\r\n        // 重置子进度条\r\n        this.listWrap.innerHTML = this.barHTML.repeat(num);\r\n        this.wrap.style.display = 'block';\r\n        // 保存子进度条上需要使用到的元素\r\n        const allProgressBar = this.listWrap.querySelectorAll('.downloadBar');\r\n        this.allProgressBar = [];\r\n        for (const bar of allProgressBar) {\r\n            const data = {\r\n                name: bar.querySelector('.fileName'),\r\n                progress: bar.querySelector('.progress'),\r\n            };\r\n            this.allProgressBar.push(data);\r\n        }\r\n    }\r\n    // 设置总进度条的进度\r\n    setTotalProgress(downloaded) {\r\n        this.downloadedEl.textContent = downloaded.toString();\r\n        const progress = (downloaded / store.result.length) * 100;\r\n        this.progressColorEl.style.width = progress + '%';\r\n    }\r\n    // 设置子进度条的进度\r\n    setProgress(index, data) {\r\n        const bar = this.allProgressBar[index];\r\n        bar.name.textContent = data.name;\r\n        const progress = data.loaded / data.total || 0; // 若结果为 NaN 则设为 0\r\n        bar.progress.style.width = progress * 100 + '%';\r\n    }\r\n    // 让某个子进度条显示警告色\r\n    showErrorColor(index, show) {\r\n        const bar = this.allProgressBar[index];\r\n        bar.name.classList[show ? 'add' : 'remove']('downloadError');\r\n    }\r\n}\r\nconst progressBar = new ProgressBar();\r\nexport { progressBar };\r\n","import { EVT } from './EVT';\r\n// 右侧的下载图标\r\nclass RightIcon {\r\n    constructor() {\r\n        this.icon = document.createElement('div');\r\n        this.addIcon();\r\n        this.bindEvents();\r\n    }\r\n    // 添加右侧下载按钮\r\n    addIcon() {\r\n        this.icon = document.createElement('div');\r\n        this.icon.textContent = '↓';\r\n        this.icon.id = 'rightButton';\r\n        document.body.appendChild(this.icon);\r\n    }\r\n    bindEvents() {\r\n        this.icon.addEventListener('click', () => {\r\n            EVT.fire(EVT.events.clickRightIcon);\r\n        });\r\n        window.addEventListener(EVT.events.hideCenterPanel, () => {\r\n            this.show();\r\n        });\r\n        window.addEventListener(EVT.events.showCenterPanel, () => {\r\n            this.hide();\r\n        });\r\n    }\r\n    show() {\r\n        this.icon.style.display = 'block';\r\n    }\r\n    hide() {\r\n        this.icon.style.display = 'none';\r\n    }\r\n}\r\nnew RightIcon();\r\n","import { filter } from './Filter';\r\nimport { store } from './Store';\r\nimport { form } from './Settings';\r\nclass SaveData {\r\n    constructor() {\r\n        // 嵌入的文件只支持指定的网站，每个网站有固定的前缀\r\n        this.providerDict = {\r\n            youtube: 'https://www.youtube.com/watch?v=',\r\n            fanbox: 'https://www.fanbox.cc/',\r\n            gist: 'https://gist.github.com/',\r\n            soundcloud: 'https://soundcloud.com/',\r\n            vimeo: 'https://vimeo.com/',\r\n            twitter: 'https://twitter.com/i/web/status/',\r\n            google_forms: 'https://docs.google.com/forms/d/e/',\r\n        };\r\n        this.extractTextReg = new RegExp(/<[^<>]+>/g);\r\n        this.matchImgSrc = new RegExp(/(?<=src=\")https.*?(jpeg|jpg|png|gif|bmp)/g);\r\n    }\r\n    receive(data) {\r\n        this.parsePost(data);\r\n    }\r\n    parsePost(data) {\r\n        if (data.body === null) {\r\n            return;\r\n        }\r\n        // 针对投稿进行检查，决定是否保留它\r\n        const id = data.id;\r\n        const fee = data.feeRequired;\r\n        const date = data.publishedDatetime;\r\n        const check = filter.check({ id, fee, date });\r\n        if (!check) {\r\n            return;\r\n        }\r\n        // 如果投稿检查通过，保存投稿信息\r\n        const result = {\r\n            postId: data.id,\r\n            type: data.type,\r\n            title: data.title,\r\n            date,\r\n            fee,\r\n            user: data.user.name,\r\n            uid: data.user.userId,\r\n            tags: data.tags.join(','),\r\n            files: [],\r\n            links: {\r\n                fileId: '',\r\n                name: 'links-' + data.id,\r\n                ext: 'txt',\r\n                size: null,\r\n                index: 0,\r\n                text: [],\r\n                url: '',\r\n                retryUrl: null\r\n            },\r\n        };\r\n        // 提取它的资源文件，并对每个资源进行检查，决定是否保存\r\n        let index = 0; // 资源的序号\r\n        // 封面图和文本资源的序号是 0，其他文件的序号自增\r\n        // 提取投稿的封面图片\r\n        // 封面图片的序号设置为 0，所以它里面不需要对 index 进行操作\r\n        if (form.savePostCover.checked) {\r\n            const cover = data.coverImageUrl;\r\n            if (cover) {\r\n                const { name, ext } = this.getUrlNameAndExt(cover);\r\n                const r = {\r\n                    fileId: this.createFileId(),\r\n                    name,\r\n                    ext,\r\n                    size: null,\r\n                    index,\r\n                    url: cover,\r\n                    retryUrl: null\r\n                };\r\n                result.files.push(r);\r\n            }\r\n        }\r\n        // 非 article 投稿都有 text 字段，这这里统一提取里面的链接\r\n        // 但是因为正则没有分组，所以非 article 投稿中如果有多个链接，可能会有遗漏，待考\r\n        // 提取文本中的链接有两种来源，一种是文章正文里的文本，一种是嵌入资源。先从正文提取链接，后提取嵌入资源的链接。这样链接保存下来的顺序比较合理。\r\n        if (data.type !== 'article') {\r\n            let text = '';\r\n            if (data.type === 'entry') {\r\n                text = data.body.html.replace(this.extractTextReg, '');\r\n            }\r\n            else {\r\n                text = data.body.text;\r\n            }\r\n            if (text) {\r\n                const links = this.getTextLinks(text);\r\n                result.links.text = result.links.text.concat(links);\r\n                result.links.fileId = this.createFileId();\r\n                // 保存文章正文里的文字\r\n                if (form.saveText.checked) {\r\n                    result.links.text.push(text);\r\n                }\r\n            }\r\n        }\r\n        // 提取 article 投稿的资源\r\n        if (data.type === 'article') {\r\n            // 从正文文本里提取链接\r\n            let linkTexts = [];\r\n            let text = ''; // 正文文本\r\n            for (const block of data.body.blocks) {\r\n                if (block.type === 'p') {\r\n                    linkTexts.push(block.text);\r\n                    if (block.links && block.links.length > 0) {\r\n                        for (const links of block.links) {\r\n                            linkTexts.push(links.url);\r\n                        }\r\n                    }\r\n                    // 保存文章正文里的文字，每个段落后面添加换行\r\n                    text += block.text + '\\r\\n\\r\\n';\r\n                }\r\n            }\r\n            for (const link of linkTexts) {\r\n                const links = this.getTextLinks(link);\r\n                result.links.text = result.links.text.concat(links);\r\n                result.links.fileId = this.createFileId();\r\n            }\r\n            if (form.saveText.checked) {\r\n                result.links.text.push(text);\r\n            }\r\n            // 保存图片资源\r\n            for (const block of data.body.blocks) {\r\n                if (block.type === 'image') {\r\n                    const imageData = data.body.imageMap[block.imageId];\r\n                    if (!imageData) {\r\n                        continue;\r\n                    }\r\n                    index++;\r\n                    const resource = this.getImageData(imageData, index);\r\n                    resource !== null && result.files.push(resource);\r\n                }\r\n            }\r\n            // 保存 file 资源\r\n            for (const block of data.body.blocks) {\r\n                if (block.type === 'file') {\r\n                    const fileData = data.body.fileMap[block.fileId];\r\n                    if (!fileData) {\r\n                        continue;\r\n                    }\r\n                    index++;\r\n                    const resource = this.getFileData(fileData, index);\r\n                    resource !== null && result.files.push(resource);\r\n                }\r\n            }\r\n            // 嵌入的资源只能保存到文本\r\n            const embedDataArr = [];\r\n            for (const [id, embedData] of Object.entries(data.body.embedMap)) {\r\n                embedDataArr.push([embedData.serviceProvider, embedData.contentId]);\r\n            }\r\n            const embedLinks = this.getEmbedLinks(embedDataArr, data.id);\r\n            result.links.text = result.links.text.concat(embedLinks);\r\n            result.links.fileId = this.createFileId();\r\n        }\r\n        // 提取 image 投稿的资源\r\n        if (data.type === 'image') {\r\n            // 保存图片资源\r\n            for (const imageData of data.body.images) {\r\n                if (!imageData) {\r\n                    continue;\r\n                }\r\n                index++;\r\n                const resource = this.getImageData(imageData, index);\r\n                resource !== null && result.files.push(resource);\r\n            }\r\n        }\r\n        // 提取 entry 投稿的图片资源\r\n        // 不知道此类型投稿中是否有其他类型的资源\r\n        if (data.type === 'entry') {\r\n            const imgList = data.body.html.match(/<img.*?>/g);\r\n            // img 标签如下：\r\n            // `<img class=\"image-medium\" src=\"https://downloads.fanbox.cc/images/post/1446/w/1200/63gmqe3ls50ccc88sogk4gwo.jpeg\" width=\"600\" height=\"557\">`\r\n            if (!imgList) {\r\n                return;\r\n            }\r\n            for (const img of imgList) {\r\n                const matchUrl = img.match('https.*(jpeg|jpg|png|gif|bmp)');\r\n                if (!matchUrl) {\r\n                    return;\r\n                }\r\n                // 组合出 imageData，添加到结果中\r\n                index++;\r\n                const url = matchUrl[0];\r\n                // url 如下:\r\n                // \"https://downloads.fanbox.cc/images/post/1446/w/1200/63gmqe3ls50ccc88sogk4gwo.jpeg\"\r\n                const { name, ext } = this.getUrlNameAndExt(url);\r\n                let width = 0;\r\n                const widthMatch = img.match(/width=\"(\\d*?)\"/);\r\n                if (widthMatch && widthMatch.length > 1) {\r\n                    width = parseInt(widthMatch[1]);\r\n                }\r\n                let height = 0;\r\n                const heightMatch = img.match(/height=\"(\\d*?)\"/);\r\n                if (heightMatch && heightMatch.length > 1) {\r\n                    height = parseInt(heightMatch[1]);\r\n                }\r\n                const imageData = {\r\n                    id: name,\r\n                    extension: ext,\r\n                    originalUrl: url,\r\n                    thumbnailUrl: url,\r\n                    width: width,\r\n                    height: height,\r\n                };\r\n                const resource = this.getImageData(imageData, index);\r\n                resource !== null && result.files.push(resource);\r\n            }\r\n        }\r\n        // 提取 file 投稿的资源\r\n        if (data.type === 'file') {\r\n            // 保存 file 资源\r\n            for (const fileData of data.body.files) {\r\n                if (!fileData) {\r\n                    continue;\r\n                }\r\n                index++;\r\n                const resource = this.getFileData(fileData, index);\r\n                resource !== null && result.files.push(resource);\r\n            }\r\n        }\r\n        // 提取 video 投稿的资源\r\n        // video 数据保存到文本\r\n        if (data.type === 'video') {\r\n            const video = data.body.video;\r\n            const embedDataArr = [\r\n                [video.serviceProvider, video.videoId],\r\n            ];\r\n            const embedLinks = this.getEmbedLinks(embedDataArr, data.id);\r\n            result.links.text = result.links.text.concat(embedLinks);\r\n            result.links.fileId = this.createFileId();\r\n        }\r\n        store.addResult(result);\r\n    }\r\n    getImageData(imageData, index) {\r\n        if (filter.check({\r\n            ext: imageData.extension,\r\n        })) {\r\n            return {\r\n                fileId: imageData.id,\r\n                name: imageData.id,\r\n                ext: imageData.extension,\r\n                size: null,\r\n                index,\r\n                url: imageData.originalUrl,\r\n                retryUrl: imageData.thumbnailUrl,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    getFileData(fileData, index) {\r\n        if (filter.check({\r\n            ext: fileData.extension,\r\n        })) {\r\n            return {\r\n                fileId: fileData.id,\r\n                name: fileData.name,\r\n                ext: fileData.extension,\r\n                size: fileData.size,\r\n                index,\r\n                url: fileData.url,\r\n                retryUrl: null\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    // 从文本里提取链接\r\n    getTextLinks(text) {\r\n        const links = [];\r\n        if (!form.saveLink.checked) {\r\n            return links;\r\n        }\r\n        // 一个段落里可能包含多个连接（啊好麻烦），所以用换行符来尝试分割一下\r\n        const textArray = text.split('\\n');\r\n        const Reg = /http[s]*:\\/\\/[\\w=\\?\\.\\/&\\-\\#\\!\\%]+/g;\r\n        for (const str of textArray) {\r\n            const match = Reg.exec(str);\r\n            Reg.lastIndex = 0;\r\n            if (match && match.length > 0) {\r\n                for (const link of match) {\r\n                    links.push(link);\r\n                }\r\n            }\r\n        }\r\n        return links;\r\n    }\r\n    // 从嵌入的资源里，获取资源的原网址\r\n    getEmbedLinks(dataArr, postId) {\r\n        const links = [];\r\n        if (!form.saveLink.checked) {\r\n            return links;\r\n        }\r\n        for (const data of dataArr) {\r\n            const [serviceProvider, contentId] = data;\r\n            let link = this.providerDict[serviceProvider] + contentId;\r\n            // 谷歌表单需要在链接后面添加特定后缀\r\n            if (serviceProvider === 'google_forms') {\r\n                link = link + '/viewform';\r\n            }\r\n            links.push(link);\r\n        }\r\n        return links;\r\n    }\r\n    // 下载器自己生成的 txt 文件没有 id，所以这里需要自己给它生成一个 id\r\n    // 使用时间戳并不保险，因为有时候代码执行太快，会生成重复的时间戳。所以后面加上随机字符\r\n    createFileId() {\r\n        return (new Date().getTime().toString() +\r\n            Math.random().toString(16).replace('.', ''));\r\n    }\r\n    // 传入文件 url，提取文件名和扩展名\r\n    getUrlNameAndExt(url) {\r\n        const split = url.split('/');\r\n        const fileName = split[split.length - 1];\r\n        const name = fileName.split('.')[0];\r\n        const ext = fileName.split('.')[1];\r\n        return {\r\n            name,\r\n            ext,\r\n        };\r\n    }\r\n}\r\nconst saveData = new SaveData();\r\nexport { saveData };\r\n","// 保存和初始化设置项\r\n// 只有部分设置会被保存\r\nimport { EVT } from './EVT';\r\nimport { store } from './Store';\r\nclass SaveSettings {\r\n    constructor(form) {\r\n        // 本地存储中使用的 name\r\n        this.storeName = 'fanboxSetting';\r\n        // 需要持久化保存的设置的默认值\r\n        this.optionDefault = {\r\n            image: true,\r\n            music: true,\r\n            video: true,\r\n            compressed: true,\r\n            ps: true,\r\n            other: true,\r\n            free: true,\r\n            pay: true,\r\n            feeSwitch: false,\r\n            fee: 500,\r\n            idRangeSwitch: false,\r\n            idRangeInput: 0,\r\n            postDate: false,\r\n            postDateStart: '',\r\n            postDateEnd: '',\r\n            saveLink: true,\r\n            saveText: false,\r\n            userSetName: store.defaultFileName,\r\n            quietDownload: true,\r\n            downloadThread: 3,\r\n            dateFormat: 'YYYY-MM-DD hh-mm',\r\n            savePostCover: false,\r\n        };\r\n        // 需要持久化保存的设置\r\n        this.options = Object.assign({}, this.optionDefault);\r\n        this.form = form;\r\n        this.bindOptionEvent();\r\n        // 设置发生改变时，保存设置到本地存储\r\n        window.addEventListener(EVT.events.settingChange, (event) => {\r\n            const data = event.detail.data;\r\n            if (Reflect.has(this.optionDefault, data.name)) {\r\n                if (this.options[data.name] !== data.value) {\r\n                    ;\r\n                    this.options[data.name] = data.value;\r\n                    localStorage.setItem(this.storeName, JSON.stringify(this.options));\r\n                }\r\n            }\r\n        });\r\n        this.restoreOption();\r\n    }\r\n    // 恢复值是 Boolean 的设置项\r\n    // 给复选框使用\r\n    restoreBoolean(name) {\r\n        // 优先使用用户设置的值\r\n        if (typeof this.options[name] === 'boolean') {\r\n            this.form[name].checked = Boolean(this.options[name]);\r\n        }\r\n        else {\r\n            // 否则使用默认值\r\n            this.form[name].checked = Boolean(this.optionDefault[name]);\r\n        }\r\n        // 这里不能简单的使用 || 符号来处理，考虑如下情况：\r\n        // this.options[name] || this.optionDefault[name]\r\n        // 用户设置为 false，默认值为 true，使用 || 的话就恒为 true 了\r\n    }\r\n    // 恢复值是 string 的设置项\r\n    // 给单选按钮和文本框使用\r\n    restoreString(name) {\r\n        // 优先使用用户设置的值\r\n        if (this.options[name] !== undefined) {\r\n            this.form[name].value = this.options[name].toString();\r\n        }\r\n        else {\r\n            // 否则使用默认值\r\n            this.form[name].value = this.optionDefault[name].toString();\r\n        }\r\n    }\r\n    // 从持久化设置，缺省使用默认值，恢复下载区域的设置\r\n    restoreOption() {\r\n        const savedOption = localStorage.getItem(this.storeName);\r\n        // 读取保存的设置\r\n        if (savedOption) {\r\n            Object.assign(this.options, JSON.parse(savedOption));\r\n        }\r\n        else {\r\n            // 如果没有保存过，则不做处理\r\n            return;\r\n        }\r\n        this.restoreString('fee');\r\n        this.restoreString('idRangeInput');\r\n        this.restoreString('postDateStart');\r\n        this.restoreString('postDateEnd');\r\n        this.restoreString('userSetName');\r\n        this.restoreString('downloadThread');\r\n        this.restoreBoolean('image');\r\n        this.restoreBoolean('music');\r\n        this.restoreBoolean('video');\r\n        this.restoreBoolean('compressed');\r\n        this.restoreBoolean('ps');\r\n        this.restoreBoolean('other');\r\n        this.restoreBoolean('free');\r\n        this.restoreBoolean('pay');\r\n        this.restoreBoolean('feeSwitch');\r\n        this.restoreBoolean('idRangeSwitch');\r\n        this.restoreBoolean('postDate');\r\n        this.restoreBoolean('saveLink');\r\n        this.restoreBoolean('saveText');\r\n        this.restoreBoolean('quietDownload');\r\n        this.restoreString('dateFormat');\r\n        this.restoreBoolean('savePostCover');\r\n    }\r\n    // 处理输入框： change 时直接保存 value\r\n    saveTextInput(name) {\r\n        const el = this.form[name];\r\n        el.addEventListener('change', () => {\r\n            this.emitChange(name, el.value);\r\n        });\r\n    }\r\n    // 处理复选框： click 时直接保存 checked\r\n    saveCheckBox(name) {\r\n        const el = this.form[name];\r\n        el.addEventListener('click', () => {\r\n            this.emitChange(name, el.checked);\r\n        });\r\n    }\r\n    // 处理单选框： click 时直接保存 value\r\n    saveRadio(name) {\r\n        const radios = this.form[name];\r\n        for (const radio of radios) {\r\n            radio.addEventListener('click', () => {\r\n                this.emitChange(name, radio.value);\r\n            });\r\n        }\r\n    }\r\n    // 绑定所有选项的事件，当选项变动触发 settingChange 事件\r\n    // 只可执行一次，否则事件会重复绑定\r\n    bindOptionEvent() {\r\n        this.saveTextInput('fee');\r\n        this.saveTextInput('idRangeInput');\r\n        this.saveTextInput('postDateStart');\r\n        this.saveTextInput('postDateEnd');\r\n        this.saveTextInput('downloadThread');\r\n        this.saveCheckBox('image');\r\n        this.saveCheckBox('music');\r\n        this.saveCheckBox('video');\r\n        this.saveCheckBox('compressed');\r\n        this.saveCheckBox('ps');\r\n        this.saveCheckBox('other');\r\n        this.saveCheckBox('free');\r\n        this.saveCheckBox('pay');\r\n        this.saveCheckBox('feeSwitch');\r\n        this.saveCheckBox('idRangeSwitch');\r\n        this.saveRadio('idRange');\r\n        this.saveCheckBox('postDate');\r\n        this.saveCheckBox('saveLink');\r\n        this.saveCheckBox('saveText');\r\n        this.saveCheckBox('quietDownload');\r\n        this.saveTextInput('dateFormat');\r\n        this.saveCheckBox('savePostCover');\r\n        // 保存命名规则\r\n        const userSetNameInput = this.form.userSetName;\r\n        ['change', 'focus'].forEach((ev) => {\r\n            userSetNameInput.addEventListener(ev, () => {\r\n                this.emitChange('userSetName', userSetNameInput.value);\r\n            });\r\n        });\r\n        window.addEventListener(EVT.events.resetOption, () => {\r\n            this.form.reset();\r\n            this.reset();\r\n        });\r\n    }\r\n    emitChange(name, value) {\r\n        EVT.fire(EVT.events.settingChange, { name: name, value: value });\r\n    }\r\n    // 重设选项\r\n    reset() {\r\n        // 将保存的选项恢复为默认值\r\n        Object.assign(this.options, this.optionDefault);\r\n        // 覆写本地存储里的设置为默认值\r\n        localStorage.setItem(this.storeName, JSON.stringify(this.options));\r\n        // 重设选项\r\n        this.restoreOption();\r\n        // 触发设置改变事件\r\n        EVT.fire(EVT.events.settingChange);\r\n    }\r\n}\r\nexport { SaveSettings };\r\n","import { lang } from './Lang';\r\nimport { store } from './Store';\r\nconst formHtml = `<form class=\"settingForm\">\r\n      <p class=\"option\" data-no=\"2\">\r\n      <span class=\"settingNameStyle1\">${lang.transl('_文件类型')}</span>\r\n\r\n      <input type=\"checkbox\" name=\"image\" id=\"fileType1\" class=\"need_beautify checkbox_common\" checked>\r\n      <span class=\"beautify_checkbox\"></span>\r\n      <label for=\"fileType1\" class=\"has_tip\" data-tip=\"${store.fileType.image.join(',')}\"> ${lang.transl('_图片')}&nbsp;</label>\r\n      \r\n      <input type=\"checkbox\" name=\"music\" id=\"fileType2\" class=\"need_beautify checkbox_common\" checked>\r\n      <span class=\"beautify_checkbox\"></span>\r\n      <label for=\"fileType2\" class=\"has_tip\" data-tip=\"${store.fileType.music.join(',')}\"> ${lang.transl('_音乐')}&nbsp;</label>\r\n\r\n      <input type=\"checkbox\" name=\"video\" id=\"fileType3\" class=\"need_beautify checkbox_common\" checked>\r\n      <span class=\"beautify_checkbox\"></span>\r\n      <label for=\"fileType3\" class=\"has_tip\" data-tip=\"${store.fileType.video.join(',')}\"> ${lang.transl('_视频')}&nbsp;</label>\r\n      \r\n      <input type=\"checkbox\" name=\"compressed\" id=\"fileType4\" class=\"need_beautify checkbox_common\" checked>\r\n      <span class=\"beautify_checkbox\"></span>\r\n      <label for=\"fileType4\" class=\"has_tip\" data-tip=\"${store.fileType.compressed.join(',')}\"> ${lang.transl('_压缩文件')}&nbsp;</label>\r\n      \r\n      <input type=\"checkbox\" name=\"ps\" id=\"fileType5\" class=\"need_beautify checkbox_common\" checked>\r\n      <span class=\"beautify_checkbox\"></span>\r\n      <label for=\"fileType5\" class=\"has_tip\" data-tip=\"${store.fileType.ps.join(',')}\"> ${lang.transl('_PS文件')}&nbsp;</label>\r\n\r\n      <input type=\"checkbox\" name=\"other\" id=\"fileType6\" class=\"need_beautify checkbox_common\" checked>\r\n      <span class=\"beautify_checkbox\"></span>\r\n      <label for=\"fileType6\" class=\"has_tip\" data-tip=\"${store.fileType.other.join(',')}\"> ${lang.transl('_其他')}&nbsp;</label>\r\n      </p>\r\n\r\n      <p class=\"option\" data-no=\"21\">\r\n      <span class=\"settingNameStyle1\">${lang.transl('_投稿类型')}</span>\r\n\r\n      <input type=\"checkbox\" name=\"free\" id=\"postType1\" class=\"need_beautify checkbox_common\" checked>\r\n      <span class=\"beautify_checkbox\"></span>\r\n      <label for=\"postType1\"> ${lang.transl('_免费投稿')}&nbsp;</label>\r\n\r\n      <input type=\"checkbox\" name=\"pay\" id=\"postType2\" class=\"need_beautify checkbox_common\" checked>\r\n      <span class=\"beautify_checkbox\"></span>\r\n      <label for=\"postType2\"> ${lang.transl('_付费投稿')}&nbsp;</label>\r\n      </p>\r\n\r\n      \r\n      <p class=\"option\" data-no=\"9\">\r\n      <span class=\"settingNameStyle1\">${lang.transl('_设置价格范围')}&nbsp;&nbsp; \r\n      </span>\r\n      <input type=\"checkbox\" name=\"feeSwitch\" class=\"need_beautify checkbox_switch\">\r\n      <span class=\"beautify_switch\"></span>\r\n      <span class=\"subOptionWrap\" data-show=\"feeSwitch\">\r\n      ${lang.transl('_最小值')}\r\n      <input type=\"text\" name=\"fee\" class=\"setinput_style1 w100 blue\" value=\"500\"> ¥\r\n      </span>\r\n      </p>\r\n      \r\n      <p class=\"option\" data-no=\"9\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_设置id范围提示')}\">${lang.transl('_设置id范围')}&nbsp;&nbsp; \r\n      <span class=\"gray1\"> ? </span></span>\r\n      <input type=\"checkbox\" name=\"idRangeSwitch\" class=\"need_beautify checkbox_switch\">\r\n      <span class=\"beautify_switch\"></span>\r\n      <span class=\"subOptionWrap\" data-show=\"idRangeSwitch\">\r\n      <input type=\"radio\" name=\"idRange\" id=\"idRange2\" class=\"need_beautify radio\" value=\"2\" checked>\r\n      <span class=\"beautify_radio\"></span>\r\n      <label for=\"idRange2\">  ${lang.transl('_小于')}&nbsp; </label>\r\n      <input type=\"radio\" name=\"idRange\" id=\"idRange1\" class=\"need_beautify radio\" value=\"1\">\r\n      <span class=\"beautify_radio\"></span>\r\n      <label for=\"idRange1\">  ${lang.transl('_大于')}&nbsp; </label>\r\n      <input type=\"text\" name=\"idRangeInput\" class=\"setinput_style1 w100 blue\" value=\"0\">\r\n      </span>\r\n      </p>\r\n\r\n      <p class=\"option\" data-no=\"10\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_设置投稿时间提示')}\">${lang.transl('_设置投稿时间')} <span class=\"gray1\"> ? </span></span>\r\n\r\n      <input type=\"checkbox\" name=\"postDate\" class=\"need_beautify checkbox_switch\">\r\n      <span class=\"beautify_switch\"></span>\r\n      <span class=\"subOptionWrap\" data-show=\"postDate\">\r\n      <input type=\"datetime-local\" name=\"postDateStart\" placeholder=\"yyyy-MM-dd HH:mm\" class=\"setinput_style1 postDate blue\" value=\"\">\r\n      &nbsp;-&nbsp;\r\n      <input type=\"datetime-local\" name=\"postDateEnd\" placeholder=\"yyyy-MM-dd HH:mm\" class=\"setinput_style1 postDate blue\" value=\"\">\r\n      </span>\r\n      </p>\r\n\r\n      <p class=\"option\" data-no=\"19\">\r\n      <span class=\"settingNameStyle1\">${lang.transl('_保存投稿中的外部链接')}&nbsp;&nbsp; \r\n      </span>\r\n      <input type=\"checkbox\" name=\"saveLink\" class=\"need_beautify checkbox_switch\" checked>\r\n      <span class=\"beautify_switch\"></span>\r\n      </p>\r\n      \r\n      <p class=\"option\" data-no=\"22\">\r\n      <span class=\"settingNameStyle1\">${lang.transl('_保存投稿中的封面图片')}&nbsp;&nbsp; \r\n      </span>\r\n      <input type=\"checkbox\" name=\"savePostCover\" class=\"need_beautify checkbox_switch\" checked>\r\n      <span class=\"beautify_switch\"></span>\r\n      </p>\r\n\r\n      <p class=\"option\" data-no=\"20\">\r\n      <span class=\"settingNameStyle1\">${lang.transl('_保存投稿中的文字')}&nbsp;&nbsp; \r\n      </span>\r\n      <input type=\"checkbox\" name=\"saveText\" class=\"need_beautify checkbox_switch\">\r\n      <span class=\"beautify_switch\"></span>\r\n      </p>\r\n\r\n    <p class=\"option\" data-no=\"13\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_设置文件夹名的提示')}\">${lang.transl('_设置文件名')}<span class=\"gray1\"> ? </span></span>\r\n      <input type=\"text\" name=\"userSetName\" class=\"setinput_style1 blue fileNameRule\" value=${store.defaultFileName}>\r\n      &nbsp;\r\n      <select name=\"fileNameSelect\">\r\n        <option value=\"default\">…</option>\r\n        <option value=\"{user}\">{user}</option>\r\n        <option value=\"{uid}\">{uid}</option>\r\n        <option value=\"{title}\">{title}</option>\r\n        <option value=\"{postid}\">{postid}</option>\r\n        <option value=\"{date}\">{date}</option>\r\n        <option value=\"{task_date}\">{task_date}</option>\r\n        <option value=\"{index}\">{index}</option>\r\n        <option value=\"{name}\">{name}</option>\r\n        <option value=\"{ext}\">{ext}</option>\r\n        <option value=\"{fee}\">{fee}</option>\r\n        <option value=\"{tags}\">{tags}</option>\r\n        </select>\r\n      &nbsp;&nbsp;\r\n      <span class=\"showFileNameTip\">？</span>\r\n      </p>\r\n      <p class=\"fileNameTip tip\">\r\n      <strong>${lang\r\n    .transl('_设置文件夹名的提示')\r\n    .replace('<br>', '. ')}</strong>\r\n      <br>\r\n      <span class=\"blue\">{user}</span>\r\n      ${lang.transl('_命名标记user')}\r\n      <br>\r\n      <span class=\"blue\">{uid}</span>\r\n      ${lang.transl('_命名标记uid')}\r\n      <br>\r\n      <span class=\"blue\">{title}</span>\r\n      ${lang.transl('_命名标记title')}\r\n      <br>\r\n      <span class=\"blue\">{postid}</span>\r\n      ${lang.transl('_命名标记postid')}\r\n      <br>\r\n      <span class=\"blue\">{date}</span>\r\n      ${lang.transl('_命名标记date')}\r\n      <br>\r\n      <span class=\"blue\">{task_date}</span>\r\n      ${lang.transl('_命名标记taskDate')}\r\n      <br>\r\n      <span class=\"blue\">{index}</span>\r\n      ${lang.transl('_命名标记index')}\r\n      <br>\r\n      <span class=\"blue\">{name}</span>\r\n      ${lang.transl('_命名标记name')}\r\n      <br>\r\n      <span class=\"blue\">{ext}</span>\r\n      ${lang.transl('_命名标记ext')}\r\n      <br>\r\n      <span class=\"blue\">{fee}</span>\r\n      ${lang.transl('_命名标记fee')}\r\n      <br>\r\n      <span class=\"blue\">{tags}</span>\r\n      ${lang.transl('_命名标记tags')}\r\n      <br>\r\n      ${lang.transl('_命名标记提醒')}\r\n      </p>\r\n\r\n      <p class=\"option\" data-no=\"31\">\r\n      <span class=\"settingNameStyle1\">${lang.transl('_日期格式')}</span>\r\n      <input type=\"text\" name=\"dateFormat\" class=\"setinput_style1 blue\" style=\"width:250px;\" value=\"YYYY-MM-DD\">\r\n      <button type=\"button\" class=\"gray1 textButton showDateTip\">${lang.transl('_提示')}</button>\r\n      </p>\r\n      <p class=\"dateFormatTip tip\" style=\"display:none\">\r\n      <span>${lang.transl('_日期格式提示')}</span>\r\n      <br>\r\n      <span class=\"blue\">YYYY</span> <span>2021</span>\r\n      <br>\r\n      <span class=\"blue\">YY</span> <span>21</span>\r\n      <br>\r\n      <span class=\"blue\">MM</span> <span>04</span>\r\n      <br>\r\n      <span class=\"blue\">MMM</span> <span>Apr</span>\r\n      <br>\r\n      <span class=\"blue\">MMMM</span> <span>April</span>\r\n      <br>\r\n      <span class=\"blue\">DD</span> <span>30</span>\r\n      <br>\r\n      <span class=\"blue\">hh</span> <span>06</span>\r\n      <br>\r\n      <span class=\"blue\">mm</span> <span>40</span>\r\n      <br>\r\n      <span class=\"blue\">ss</span> <span>08</span>\r\n      <br>\r\n      </p>\r\n      \r\n      <p class=\"option\" data-no=\"16\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_线程数字')}\">${lang.transl('_设置下载线程')}<span class=\"gray1\"> ? </span></span>\r\n      <input type=\"text\" name=\"downloadThread\" class=\"setinput_style1 blue\" value=\"5\">\r\n      </p>\r\n\r\n      <p class=\"option\" data-no=\"17\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_自动下载的提示')}\">${lang.transl('_自动开始下载')}<span class=\"gray1\"> ? </span></span>\r\n      <input type=\"checkbox\" name=\"quietDownload\" id=\"setQuietDownload\" class=\"need_beautify checkbox_switch\" checked>\r\n      <span class=\"beautify_switch\"></span>\r\n      </p>\r\n      \r\n      <slot data-name=\"crawlBtns\" class=\"centerWrap_btns crawlBtns\"></slot>\r\n      <slot data-name=\"downloadArea\"></slot>\r\n      <slot data-name=\"progressBar\"></slot>\r\n</form>`;\r\nexport default formHtml;\r\n","import { EVT } from './EVT';\r\nimport { DOM } from './DOM';\r\nimport { SaveSettings } from './SaveSettings';\r\nimport formHtml from './SettingHTML';\r\n// 设置表单\r\nclass Settings {\r\n    constructor() {\r\n        this.activeClass = 'active';\r\n        this.chooseKeys = ['Enter', 'NumpadEnter']; // 让回车键可以控制复选框（浏览器默认只支持空格键）\r\n        this.form = DOM.useSlot('form', formHtml);\r\n        this.allCheckBox = this.form.querySelectorAll('input[type=\"checkbox\"]');\r\n        this.allRadio = this.form.querySelectorAll('input[type=\"radio\"]');\r\n        this.allSwitch = this.form.querySelectorAll('.checkbox_switch');\r\n        this.allLabel = this.form.querySelectorAll('label');\r\n        this.bindEvents();\r\n        new SaveSettings(this.form);\r\n        // new SaveSettings 会初始化选项，但可能会有一些选项的值在初始化过程中没有发生改变，也就不会被监听到变化。所以这里需要直接初始化以下状态。\r\n        this.initFormBueatiful();\r\n    }\r\n    // 设置表单上美化元素的状态\r\n    initFormBueatiful() {\r\n        // 设置改变时，重设 label 激活状态\r\n        this.resetLabelActive();\r\n        // 重设该选项的子选项的显示/隐藏\r\n        this.resetSubOptionDisplay();\r\n    }\r\n    bindEvents() {\r\n        // 给美化的复选框绑定功能\r\n        for (const checkbox of this.allCheckBox) {\r\n            this.bindCheckboxEvent(checkbox);\r\n        }\r\n        // 给美化的单选按钮绑定功能\r\n        for (const radio of this.allRadio) {\r\n            this.bindRadioEvent(radio);\r\n        }\r\n        // 处理 label 状态\r\n        window.addEventListener(EVT.events.settingChange, () => {\r\n            this.initFormBueatiful();\r\n        });\r\n        // 显示命名字段提示\r\n        this.form\r\n            .querySelector('.showFileNameTip')\r\n            .addEventListener('click', () => DOM.toggleEl(document.querySelector('.fileNameTip')));\r\n        // 显示日期格式提示\r\n        this.form\r\n            .querySelector('.showDateTip')\r\n            .addEventListener('click', () => DOM.toggleEl(document.querySelector('.dateFormatTip')));\r\n        // 输入框获得焦点时自动选择文本（文件名输入框例外）\r\n        const centerInputs = this.form.querySelectorAll('input[type=text]');\r\n        for (const el of centerInputs) {\r\n            if (el.name !== 'userSetName') {\r\n                el.addEventListener('focus', function () {\r\n                    this.select();\r\n                });\r\n            }\r\n        }\r\n        // 把下拉框的选择项插入到文本框里\r\n        this.insertValueToInput(this.form.fileNameSelect, this.form.userSetName);\r\n    }\r\n    // 把下拉框的选择项插入到文本框里\r\n    insertValueToInput(from, to) {\r\n        from.addEventListener('change', () => {\r\n            if (from.value !== 'default') {\r\n                // 把选择项插入到光标位置,并设置新的光标位置\r\n                const position = to.selectionStart;\r\n                to.value =\r\n                    to.value.substr(0, position) +\r\n                        from.value +\r\n                        to.value.substr(position, to.value.length);\r\n                to.selectionStart = position + from.value.length;\r\n                to.selectionEnd = position + from.value.length;\r\n                to.focus();\r\n            }\r\n        });\r\n    }\r\n    // 设置复选框的事件\r\n    bindCheckboxEvent(el) {\r\n        // 让复选框支持用回车键选择\r\n        el.addEventListener('keydown', (event) => {\r\n            if (this.chooseKeys.includes(event.code)) {\r\n                el.checked = !el.checked;\r\n                this.emitChange(el.name, el.checked);\r\n            }\r\n        });\r\n        // 点击美化按钮，反转复选框的值\r\n        el.nextElementSibling.addEventListener('click', () => {\r\n            el.checked = !el.checked;\r\n            this.emitChange(el.name, el.checked);\r\n        });\r\n        // 点击它的 label 时，传递它的值\r\n        const label = this.form.querySelector(`label[for=\"${el.id}\"]`);\r\n        if (label) {\r\n            label.addEventListener('click', () => {\r\n                // 点击复选框的 label 不要手动修改 checked ，因为浏览器会自动处理\r\n                this.emitChange(el.name, el.checked);\r\n            });\r\n        }\r\n    }\r\n    // 设置单选控件的事件\r\n    bindRadioEvent(el) {\r\n        // 点击美化按钮，选择当前单选控件\r\n        el.nextElementSibling.addEventListener('click', () => {\r\n            el.checked = true;\r\n            // 对于单选按钮，它的值是 value，不是 checked\r\n            this.emitChange(el.name, this.form[el.name].value);\r\n        });\r\n        // 点击它的 label 时，传递它的值\r\n        const label = this.form.querySelector(`label[for=\"${el.id}\"]`);\r\n        if (label) {\r\n            label.addEventListener('click', () => {\r\n                this.emitChange(el.name, this.form[el.name].value);\r\n            });\r\n        }\r\n    }\r\n    // 当选项的值被改变时，触发 settingChange 事件\r\n    emitChange(name, value) {\r\n        EVT.fire(EVT.events.settingChange, { name: name, value: value });\r\n    }\r\n    // 重设 label 的激活状态\r\n    resetLabelActive() {\r\n        // 设置复选框的 label 的激活状态\r\n        for (const checkbox of this.allCheckBox) {\r\n            this.setLabelActive(checkbox);\r\n        }\r\n        // 设置单选按钮的 label 的激活状态\r\n        for (const radio of this.allRadio) {\r\n            this.setLabelActive(radio);\r\n        }\r\n    }\r\n    // 设置 input 元素对应的 label 的激活状态\r\n    setLabelActive(input) {\r\n        const label = this.form.querySelector(`label[for=\"${input.id}\"]`);\r\n        if (label) {\r\n            const method = input.checked ? 'add' : 'remove';\r\n            label.classList[method]('active');\r\n        }\r\n    }\r\n    // 重设子选项的显示/隐藏\r\n    resetSubOptionDisplay() {\r\n        for (const _switch of this.allSwitch) {\r\n            const subOption = this.form.querySelector(`.subOptionWrap[data-show=\"${_switch.name}\"]`);\r\n            if (subOption) {\r\n                subOption.style.display = _switch.checked ? 'inline' : 'none';\r\n            }\r\n        }\r\n    }\r\n}\r\nconst settings = new Settings();\r\nconst form = settings.form;\r\nexport { form };\r\n","// 仓库\r\nimport { EVT } from './EVT';\r\n// 存储抓取结果和状态\r\nclass Store {\r\n    constructor() {\r\n        this.resultMeta = []; // 储存抓取结果的元数据\r\n        this.result = []; // 储存抓取结果\r\n        this.defaultFileName = '{user}/{title}/{index}';\r\n        this.crawlCompleteTime = new Date();\r\n        // 文件类型。fanbox 允许直接上传在投稿里的文件类型只有这些\r\n        this.fileType = {\r\n            image: ['jpg', 'jpeg', 'png', 'gif'],\r\n            music: ['wav', 'mp3', 'flac'],\r\n            video: ['mp4', 'mov', 'avi'],\r\n            compressed: ['zip'],\r\n            ps: ['psd', 'clip'],\r\n            other: ['txt', 'pdf'],\r\n        };\r\n        // 储存和下载有关的状态\r\n        this.states = {\r\n            allowWork: true,\r\n            quickDownload: false,\r\n        };\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        const allowWorkTrue = [\r\n            EVT.events.crawlFinish,\r\n            EVT.events.crawlEmpty,\r\n            EVT.events.crawlError,\r\n            EVT.events.downloadPause,\r\n            EVT.events.downloadStop,\r\n        ];\r\n        allowWorkTrue.forEach((type) => {\r\n            window.addEventListener(type, () => {\r\n                this.states.allowWork = true;\r\n            });\r\n        });\r\n        const allowWorkFalse = [EVT.events.crawlStart, EVT.events.downloadStart];\r\n        allowWorkFalse.forEach((type) => {\r\n            window.addEventListener(type, () => {\r\n                this.states.allowWork = false;\r\n            });\r\n        });\r\n        window.addEventListener(EVT.events.crawlStart, () => {\r\n            this.resetResult();\r\n        });\r\n        window.addEventListener(EVT.events.downloadComplete, () => {\r\n            this.resetStates();\r\n        });\r\n    }\r\n    getCommonData(data) {\r\n        return {\r\n            postId: data.postId,\r\n            type: data.type,\r\n            title: data.title,\r\n            date: data.date,\r\n            fee: data.fee,\r\n            user: data.user,\r\n            uid: data.uid,\r\n            tags: data.tags,\r\n        };\r\n    }\r\n    // 添加每个作品的信息。只需要传递有值的属性\r\n    addResult(data) {\r\n        this.resultMeta.push(data);\r\n        // 因为文本的体积小，所以首先生成文本数据，它会被最早下载。这样不用等待大文件下载完了才下载文本文件\r\n        // 为投稿里的所有的 文本内容 生成一份数据\r\n        if (data.links.text.length > 0) {\r\n            console.log(data.links.text);\r\n            const text = data.links.text.join('\\r\\n');\r\n            const blob = new Blob([text], {\r\n                type: 'text/plain',\r\n            });\r\n            data.links.url = URL.createObjectURL(blob);\r\n            data.links.size = blob.size;\r\n            const result = Object.assign(this.getCommonData(data), data.links);\r\n            this.result.push(result);\r\n        }\r\n        // 为投稿里的每个 files 生成一份数据\r\n        const files = data.files;\r\n        for (const fileData of files) {\r\n            const result = Object.assign(this.getCommonData(data), fileData);\r\n            this.result.push(result);\r\n        }\r\n    }\r\n    resetResult() {\r\n        this.resultMeta = [];\r\n        this.result = [];\r\n    }\r\n    resetStates() {\r\n        this.states.allowWork = true;\r\n        this.states.quickDownload = false;\r\n    }\r\n}\r\nconst store = new Store();\r\nexport { store };\r\n","import { EVT } from './EVT';\r\n// 辅助功能\r\nclass Support {\r\n    constructor() {\r\n        this.supportListenHistory();\r\n        this.listenPageSwitch();\r\n    }\r\n    // 使用无刷新加载的页面需要监听 url 的改变，这里为这些事件添加监听支持\r\n    supportListenHistory() {\r\n        const element = document.createElement('script');\r\n        element.setAttribute('type', 'text/javascript');\r\n        element.innerHTML = `\r\n    let _wr = function (type) {\r\n      let orig = history[type];\r\n      return function () {\r\n        let rv = orig.apply(this, arguments);\r\n        let e = new Event(type);\r\n        e.arguments = arguments;\r\n        window.dispatchEvent(e);\r\n        return rv;\r\n      };\r\n    };\r\n    history.pushState = _wr('pushState');\r\n    history.replaceState = _wr('replaceState');\r\n    `;\r\n        document.head.appendChild(element);\r\n    }\r\n    // 监听页面的无刷新切换。某些页面可以无刷新切换，这时需要进行一些处理\r\n    listenPageSwitch() {\r\n        // 绑定无刷新切换页面的事件，只绑定一次\r\n        ;\r\n        ['pushState', 'popstate', 'replaceState'].forEach((item) => {\r\n            window.addEventListener(item, () => {\r\n                EVT.fire(EVT.events.pageSwitch);\r\n            });\r\n        });\r\n    }\r\n}\r\nnew Support();\r\n","// 显示自定义的提示\r\nclass Tip {\r\n    constructor() {\r\n        this.tipEl = document.createElement('div'); // tip 元素\r\n        this.addTipEl();\r\n    }\r\n    // 显示提示\r\n    addTipEl() {\r\n        const tipHTML = `<div id=\"tip\"></div>`;\r\n        document.body.insertAdjacentHTML('beforeend', tipHTML);\r\n        this.tipEl = document.getElementById('tip');\r\n        const tips = document.querySelectorAll('.has_tip');\r\n        for (const el of tips) {\r\n            for (const ev of ['mouseenter', 'mouseleave']) {\r\n                el.addEventListener(ev, (event) => {\r\n                    const e = (event || window.event);\r\n                    const text = el.dataset.tip;\r\n                    this.showTip(text, {\r\n                        type: ev === 'mouseenter' ? 1 : 0,\r\n                        x: e.clientX,\r\n                        y: e.clientY,\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n    // 显示中间面板上的提示。参数 arg 指示鼠标是移入还是移出，并包含鼠标位置\r\n    showTip(text, arg) {\r\n        if (!text) {\r\n            throw new Error('No tip text.');\r\n        }\r\n        if (arg.type === 1) {\r\n            this.tipEl.innerHTML = text;\r\n            this.tipEl.style.left = arg.x + 30 + 'px';\r\n            this.tipEl.style.top = arg.y - 30 + 'px';\r\n            this.tipEl.style.display = 'block';\r\n        }\r\n        else if (arg.type === 0) {\r\n            this.tipEl.style.display = 'none';\r\n        }\r\n    }\r\n}\r\nnew Tip();\r\n","// 在标题栏上显示下载器工作状态\r\nimport { pageType } from './PageType';\r\nclass TitleBar {\r\n    constructor() {\r\n        /*\r\n        本程序的状态会以 [string] 形式添加到 title 最前面，并闪烁提醒\r\n        string 和含义列表如下：\r\n        ↑ 抓取中\r\n        → 等待下一步操作（搜索页）\r\n        ▶ 可以开始下载\r\n        ↓ 下载中\r\n        ║ 下载暂停\r\n        ■ 下载停止\r\n        √ 下载完毕\r\n          空格，当需要闪烁标题时使用\r\n        */\r\n        this.status = ['↑', '→', '▶', '↓', '║', '■', '√', ' '];\r\n        this.timer = 0; // 修改 title 的定时器\r\n    }\r\n    // 检查标题里有没有本程序定义的状态字符\r\n    haveStatus(status = '') {\r\n        if (!status) {\r\n            // 没有传递 status，则检查所有标记\r\n            for (const status of this.status) {\r\n                const str = `[${status}]`;\r\n                if (document.title.includes(str)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // 检查指定标记\r\n            const str = `[${status}]`;\r\n            return document.title.includes(str);\r\n        }\r\n        return false;\r\n    }\r\n    // 重设 title\r\n    reset() {\r\n        const type = pageType.getPageType();\r\n        clearInterval(this.timer);\r\n        // 储存标题的 mete 元素。在某些页面不存在，有时也与实际上的标题不一致。\r\n        const ogTitle = document.querySelector('meta[property=\"og:title\"]');\r\n        // 无刷新自动加载的页面里，og:title 标签是最早更新标题的，内容也一致。\r\n        if (ogTitle && (type == 1 || type === 2)) {\r\n            document.title = ogTitle.content;\r\n        }\r\n        else {\r\n            // 如果当前 title 里有状态提醒，则设置为状态后面的文字\r\n            if (this.haveStatus()) {\r\n                const index = document.title.indexOf(']');\r\n                document.title = document.title.substr(index + 1, document.title.length);\r\n            }\r\n        }\r\n    }\r\n    // 修改title\r\n    change(string) {\r\n        const state = `[${string}]`;\r\n        // 如果 title 里没有状态，就添加状态\r\n        if (!this.haveStatus()) {\r\n            document.title = `${state} ${document.title}`;\r\n        }\r\n        else {\r\n            // 如果已经有状态了，则替换为新当前传入的状态\r\n            document.title = document.title.replace(/\\[.?\\]/, state);\r\n        }\r\n        // 闪烁提醒，其实是把 [▶] 或 [→] 与空白 [ ] 来回切换\r\n        if (string === '▶' || string === '→') {\r\n            this.timer = window.setInterval(() => {\r\n                if (this.haveStatus(string)) {\r\n                    // 如果含有状态，就替换成空白\r\n                    document.title = document.title.replace(state, '[ ]');\r\n                }\r\n                else {\r\n                    if (this.haveStatus(' ')) {\r\n                        // 如果含有空白，就替换成状态\r\n                        document.title = document.title.replace('[ ]', state);\r\n                    }\r\n                    else {\r\n                        // 如果都没有，一般是页面切换了，标题被重置了，取消执行闪烁（此时也根本无法形成闪烁效果了）\r\n                        clearInterval(this.timer);\r\n                    }\r\n                }\r\n            }, 500);\r\n        }\r\n        else {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n}\r\nconst titleBar = new TitleBar();\r\nexport { titleBar };\r\n","const langText = {\r\n    _或者: [' 或者 ', ' または ', ' or ', ' 或是 '],\r\n    _并且: [' 并且 ', ' かつ ', ' and ', ' 並且 '],\r\n    _任务开始0: ['任务开始', 'タスクの開始', 'Task starts', '工作開始'],\r\n    _抓取结果为零: [\r\n        '抓取完毕，但没有找到符合筛选条件的文件。',\r\n        'フィルタ条件で検索しましたが、該当するファイルは見つかりませんでした。',\r\n        'Crawl finished but did not find files that match the filter criteria.',\r\n        '擷取完畢，但沒有找到符合篩選條件的檔案。',\r\n    ],\r\n    _当前任务尚未完成2: [\r\n        '当前任务尚未完成，请等待完成后再下载。',\r\n        '現在のタスクはまだ完了していません。完了するまでお待ちください。',\r\n        'The current task has not yet been completed',\r\n        '目前工作尚未完成，請等待完成後再下載。',\r\n    ],\r\n    _关闭: ['关闭', '閉じる', 'close', '關閉'],\r\n    _输出信息: ['输出信息', '出力情報', 'Output information', '輸出資訊'],\r\n    _复制: ['复制', 'コピー', 'Copy', '複製'],\r\n    _已复制到剪贴板: [\r\n        '已复制到剪贴板，可直接粘贴',\r\n        'クリップボードにコピーしました。',\r\n        'Has been copied to the clipboard',\r\n        '已複製至剪貼簿，可直接貼上',\r\n    ],\r\n    _下载设置: ['下载设置', 'ダウンロード設定', 'Download settings', '下載設定'],\r\n    _收起展开设置项: [\r\n        '收起/展开设置项',\r\n        '設定の折りたたみ/展開',\r\n        'Collapse/expand settings',\r\n        '摺疊/展開設定項目',\r\n    ],\r\n    _github: [\r\n        'Github 页面，欢迎 star',\r\n        'Github のページ、star をクリックしてください。',\r\n        'Github page, if you like, please star it',\r\n        'Github 頁面，歡迎 star',\r\n    ],\r\n    _wiki: ['使用手册', 'マニュアル', 'Wiki', 'Wiki'],\r\n    _抓取: ['抓取', '保存', 'Crawl', '擷取'],\r\n    _下载: ['下载', 'ダウンロード', 'Download', '下載'],\r\n    _其他: ['其他', 'その他', 'Other', '其他'],\r\n    _快捷键切换显示隐藏: [\r\n        '使用 Alt + X，可以显示和隐藏下载面板',\r\n        'Alt + X でダウンロードパネルを表示/非表示にできます。',\r\n        'Use Alt + X to show and hide the download panel',\r\n        '使用 Alt + X，可以顯示和隱藏下載面板',\r\n    ],\r\n    _共抓取到n个文件: [\r\n        '共抓取到 {} 个文件',\r\n        '合計 {} 個のファイルを取得しました。',\r\n        'Crawl a total of {} files',\r\n        '共擷取到 {} 個檔案',\r\n    ],\r\n    _设置文件名: [\r\n        '设置命名规则',\r\n        '命名規則の設定',\r\n        'Set naming rules',\r\n        '設定命名規則',\r\n    ],\r\n    _设置文件夹名的提示: [\r\n        `可以使用 '/' 建立文件夹<br>示例：{user}/{title}/{index}`,\r\n        `フォルダーは '/' で作成できます。<br>例：{user}/{title}/{index}`,\r\n        `You can create a directory with '/'<br>Example：{user}/{title}/{index}`,\r\n        `可以使用 '/' 建立資料夾<br>範例：{user}/{title}/{index}`,\r\n    ],\r\n    _命名标记user: ['画师名字', 'ユーザー名', 'Artist name', '畫師名稱'],\r\n    _命名标记uid: ['画师 id', 'ユーザーID', 'Artist id', '畫師 id'],\r\n    _预览文件名: [\r\n        '预览文件名',\r\n        'ファイル名のプレビュー',\r\n        'Preview file name',\r\n        '預覽檔案名稱',\r\n    ],\r\n    _设置下载线程: [\r\n        '设置下载线程',\r\n        '同時ダウンロード数の設定',\r\n        'Set the download thread',\r\n        '設定下載執行緒',\r\n    ],\r\n    _线程数字: [\r\n        '可以输入 1-10 之间的数字，设置同时下载的数量',\r\n        '同時にダウンロードするファイルの数を 1-10 で設定します。',\r\n        'You can type a number between 1-10 to set the number of concurrent downloads',\r\n        '可以輸入 1-10 之間的數字，設定同時下載的數量',\r\n    ],\r\n    _下载按钮1: ['开始下载', 'ダウンロードを開始', 'start download', '開始下載'],\r\n    _下载按钮2: [\r\n        '暂停下载',\r\n        'ダウンロードを一時停止',\r\n        'pause download',\r\n        '暫停下載',\r\n    ],\r\n    _下载按钮3: ['停止下载', 'ダウンロードを停止', 'stop download', '停止下載'],\r\n    _下载按钮4: ['复制 url', 'URLをコピー', 'copy urls', '複製url'],\r\n    _当前状态: ['当前状态 ', '現在の状態 ', 'Now state ', '目前狀態 '],\r\n    _未开始下载: [\r\n        '未开始下载',\r\n        'まだダウンロードを開始していません。',\r\n        'Not yet started downloading',\r\n        '未開始下載',\r\n    ],\r\n    _下载进度: [\r\n        '下载进度：',\r\n        'ダウンロードの進行状況：',\r\n        'Download progress: ',\r\n        '下載進度：',\r\n    ],\r\n    _下载线程: ['下载线程：', 'スレッド：', 'Thread: ', '下載執行緒：'],\r\n    _常见问题: ['常见问题', 'よくある質問', 'Common problems', '常見問題'],\r\n    _uuid: [\r\n        '如果下载后的文件名异常，请禁用其他有下载功能的浏览器扩展。',\r\n        'ダウンロード後のファイル名が異常な場合、ダウンロード機能を持つ他のブラウザ拡張機能を無効にしてください。',\r\n        'If the file name after downloading is abnormal, disable other browser extensions that have download capabilities.',\r\n        '如果下載後的檔案名稱異常，請停用其他有下載功能的瀏覽器擴充功能。',\r\n    ],\r\n    _下载说明: [\r\n        \"下载的文件保存在浏览器的下载目录里。<br>请不要在浏览器的下载选项里选中'总是询问每个文件的保存位置'。<br><b>如果下载后的文件名异常，请禁用其他有下载功能的浏览器扩展。</b><br>QQ群：853021998\",\r\n        'ダウンロードしたファイルは、ブラウザのダウンロードディレクトリに保存されます。<br><b>ダウンロード後のファイル名が異常な場合は、ダウンロード機能を持つ他のブラウザ拡張機能を無効にしてください。</b>',\r\n        'The downloaded file is saved in the browser`s download directory. <br><b>If the file name after downloading is abnormal, disable other browser extensions that have download capabilities.</b>',\r\n        '下載的檔案儲存在瀏覽器的下載目錄裡。<br>請不要在瀏覽器的下載選項裡選取「下載每個檔案前先詢問儲存位置」。<br><b>如果下載後的檔案名稱異常，請停用其他有下載功能的瀏覽器擴充功能。</b><br>QQ群：853021998',\r\n    ],\r\n    _正在下载中: ['正在下载中', 'ダウンロード中', 'Downloading', '正在下載'],\r\n    _下载完毕: [\r\n        '√ 下载完毕!',\r\n        '√ ダウンロードが完了しました！',\r\n        '√ Download finished',\r\n        '√ 下載完畢!',\r\n    ],\r\n    _已暂停: [\r\n        '下载已暂停',\r\n        'ダウンロードを一時停止中です。',\r\n        'Download is paused',\r\n        '下載已暫停',\r\n    ],\r\n    _已停止: [\r\n        '下载已停止',\r\n        'ダウンロードを停止しました。',\r\n        'Download stopped',\r\n        '下載已停止',\r\n    ],\r\n    _已下载: ['已下载', 'downloaded', 'downloaded', '已下載'],\r\n    _抓取完毕: [\r\n        '抓取完毕！',\r\n        'ダウンロードが完了しました！',\r\n        'Crawl finished!',\r\n        '擷取完畢！',\r\n    ],\r\n    _快速下载本页: ['快速下载这个投稿'],\r\n    _自动开始下载: [\r\n        '自动开始下载',\r\n        'ダウンロードを自動で開始',\r\n        'Download starts automatically',\r\n        '自動開始下載',\r\n    ],\r\n    _自动下载的提示: [\r\n        '当“开始下载”状态可用时，自动开始下载，不需要点击下载按钮。',\r\n        '「ダウンロードを開始する」ステータスが有効になると、ダウンロードが自動的に開始され、ダウンロードボタンをクリックする必要がなくなります。',\r\n        'When the &quot;Start Downloa&quot; status is available, the download starts automatically and no need to click the download button.',\r\n        '當可下載時自動開始下載，不需要點選下載按鈕。',\r\n    ],\r\n    _文件下载失败: [\r\n        '文件 {} 下载失败',\r\n        'ファイル {} のダウンロードに失敗しました。',\r\n        'File {} download failed',\r\n        '檔案 {} 下載失败',\r\n    ],\r\n    _重置设置: ['重置设置', '設定リセット', 'Reset Settings', '重設設定'],\r\n    _是否重置设置: [\r\n        '是否重置设置？',\r\n        '設定をリセットしますか？',\r\n        'Do you want to reset the settings?',\r\n        '是否重設設定？',\r\n    ],\r\n    _设置id范围: [\r\n        '设置 id 范围',\r\n        '投稿IDの範囲を設定',\r\n        'Set id range',\r\n        '設定 id 範圍',\r\n    ],\r\n    _设置id范围提示: [\r\n        '您可以输入一个投稿 id，抓取比它新或者比它旧的投稿',\r\n        '1つの投稿IDを入力することで、それより新しいあるいは古い投稿をまとめてダウンロードすることができます。',\r\n        'You can enter a work id and crawl articles that are newer or older than it',\r\n        '您可以輸入一個投稿 id，擷取比它新或者比它舊的投稿。',\r\n    ],\r\n    _大于: ['大于', 'より新しい', 'Bigger than', '大於'],\r\n    _小于: ['小于', 'より古い', 'Less than', '小於'],\r\n    _设置投稿时间: [\r\n        '设置投稿时间',\r\n        '投稿日時の設定',\r\n        'Set posting date',\r\n        '設定投稿時間',\r\n    ],\r\n    _设置投稿时间提示: [\r\n        '您可以下载指定时间内发布的投稿',\r\n        '指定期間内の投稿をまとめてダウンロードできます。',\r\n        'You can download articles published within a specified time',\r\n        '您可以下載指定時間内發佈的投稿',\r\n    ],\r\n    _没有数据可供使用: [\r\n        '没有数据可供使用',\r\n        '該当するデータはありません。',\r\n        'No data is available.',\r\n        '沒有資料可供使用',\r\n    ],\r\n    _命名规则: ['命名规则', '命名規則', 'Naming rule', '命名規則'],\r\n    _最小值: ['最小值', '最小値', 'Minimum value', '最小值'],\r\n    _最大值: ['最大值', '最大値', 'maximum value', '最大值'],\r\n    _文件类型: ['文件类型', 'ファイルタイプ', 'File type', '檔案類型'],\r\n    _图片: ['图片', '画像', 'Image', '圖片'],\r\n    _视频: ['视频', '映像', 'Video', '影片'],\r\n    _音乐: ['音频', '音声', 'Audio', '音訊'],\r\n    _压缩文件: ['压缩文件', '圧縮ファイル', 'Compressed file', '壓縮檔'],\r\n    _PS文件: ['源文件', 'ソースファイル', 'Source File', '原始檔'],\r\n    _投稿类型: ['投稿类型', '投稿タイプ', 'Article type', '投稿類型'],\r\n    _免费投稿: ['免费投稿', '無料投稿', 'Free article', '免費投稿'],\r\n    _付费投稿: ['付费投稿', '有償投稿', 'Paid article', '付費投稿'],\r\n    _设置价格范围: [\r\n        '设置价格范围',\r\n        '価格帯を設定',\r\n        'Set price range',\r\n        '設定價格範圍',\r\n    ],\r\n    _保存投稿中的外部链接: [\r\n        '保存投稿中的外部链接',\r\n        '本文中の外部リンクを保存',\r\n        'Save external links in the articles',\r\n        '儲存投稿中的外部連結',\r\n    ],\r\n    _保存投稿中的文字: [\r\n        '保存投稿中的文字',\r\n        '投稿の本文を保存',\r\n        'Save the text in the articles',\r\n        '儲存投稿中的文字',\r\n    ],\r\n    _抓取文件数量: [\r\n        '已获取 {} 个文件',\r\n        '{} 個のファイルを取得',\r\n        '{} Files acquired',\r\n        '已取得 {} 個檔案',\r\n    ],\r\n    _早于: ['早于', 'より前', 'Earlier than', '早於'],\r\n    _晚于: ['晚于', 'より後', 'Later than', '晚於'],\r\n    _抓取赞助的所有用户的投稿: [\r\n        '抓取赞助的所有用户的投稿',\r\n        '支援中のユーザーの投稿をまとめて保存',\r\n        'Crawl all sponsored articles',\r\n        '擷取所有贊助用戶的投稿',\r\n    ],\r\n    _抓取该用户的投稿: [\r\n        '抓取该用户的投稿',\r\n        'このユーザーの投稿をまとめて保存',\r\n        \"Crawl this user's articles\",\r\n        '擷取該用戶的投稿',\r\n    ],\r\n    _抓取该tag的投稿: [\r\n        '抓取该 tag 的投稿',\r\n        'このタグの投稿をまとめて保存',\r\n        'Crawl articles with this tag',\r\n        '擷取該 tag 的投稿',\r\n    ],\r\n    _抓取这篇投稿: [\r\n        '抓取这篇投稿',\r\n        'この投稿を保存',\r\n        'Crawl this article',\r\n        '擷取這篇投稿',\r\n    ],\r\n    _抓取商品的封面图: [\r\n        '抓取商品的封面图',\r\n        '投稿の表紙画像を保存',\r\n        'Crawl the cover image of the product',\r\n        '擷取商品的封面圖',\r\n    ],\r\n    _命名标记postid: ['投稿 id', '投稿ID', 'Article id', '投稿 id'],\r\n    _命名标记title: ['投稿标题', '投稿のタイトル', 'Article title', '投稿標題'],\r\n    _命名标记tags: [\r\n        '投稿的 tag 列表（可能为空）',\r\n        '投稿のタグリスト（空の場合があります）',\r\n        \"Article's tag list (may be empty)\",\r\n        '投稿的 tag 列表（可能為空）',\r\n    ],\r\n    _命名标记date: [\r\n        '投稿的发布日期，如 2019-08-29 12-30',\r\n        '投稿日など，例 2019-08-29 12-30',\r\n        'The publication date of the article, such as 2019-08-29 12-30',\r\n        '投稿的發布日期，如 2019-08-29 12-30',\r\n    ],\r\n    _命名标记fee: ['投稿的价格', '支援額', 'Article price', '投稿的價格'],\r\n    _命名标记index: [\r\n        '文件在它所属的投稿里的序号',\r\n        '投稿内のファイルの連番',\r\n        'The serial number of the file in the article it belongs to',\r\n        '檔案在它所屬的投稿裡的序號',\r\n    ],\r\n    _命名标记name: [\r\n        '文件在投稿里的文件名',\r\n        '投稿内のファイル名',\r\n        'File name in the article',\r\n        '檔案在投稿裡的名稱',\r\n    ],\r\n    _命名标记ext: [\r\n        '文件的扩展名',\r\n        'ファイルの拡張子',\r\n        'File extension',\r\n        '檔案的副檔名',\r\n    ],\r\n    _命名标记提醒: [\r\n        '您可以使用多个标记；建议在不同标记之间添加分割用的字符。示例：{title}-{postid}<br>建议在命名规则中包含 {postid} 和 {index}，防止文件名重复。',\r\n        '複数のタグを使用できます。異なるタグを区切るために文字を追加することを推奨します。 例：{title}-{postid} <br>ファイル名の重複を防ぐために、命名規則に{postid}と{index}を含めることを推奨します。',\r\n        'You can use multiple tags; it is recommended to add characters to separate between different tags. Example: {title}-{postid} <br> It is recommended to include {postid} and {index} in the naming rules to prevent duplicate file names.',\r\n        '您可以使用多個標記；建議在不同標記之間加入分隔用的字元。範例：{title}-{postid}<br>建議在命名規則中包含 {postid} 和 {index}，防止檔名重複。',\r\n    ],\r\n    _日期格式: [\r\n        '日期和时间格式',\r\n        '日時の書式',\r\n        'Date and time format',\r\n        '日期和時間格式',\r\n    ],\r\n    _日期格式提示: [\r\n        '你可以使用以下标记来设置日期和时间格式。这会影响命名规则里的 {date} 和 {task_date}。<br>对于时间如 2021-04-30T06:40:08',\r\n        '以下のタグを使用して日時の書式を設定できます。 これは命名規則の {date} と {task_date} に影響します。 <br> 例：2021-04-30T06:40:08',\r\n        'You can use the following notation to set the date and time format. This will affect {date} and {task_date} in the naming rules. <br>For time such as 2021-04-30T06:40:08',\r\n        '你可以使用以下標記來設定日期和時間格式。這會影響命名規則裡的 {date} 和 {task_date}。<br>對於資料如：2021-04-30T06:40:08。',\r\n    ],\r\n    _命名标记taskDate: [\r\n        '本次任务抓取完成时的时间。例如：2020-10-21',\r\n        'タスクを完了した日時です。 例：2020-10-21',\r\n        'The time when the task was crawl completed. For example: 2020-10-21',\r\n        '本次工作擷取完成時的時間。例如：2020-10-21。',\r\n    ],\r\n    _提示: ['提示', 'ヒント', 'tip', '提示'],\r\n    _保存投稿中的封面图片: [\r\n        '保存投稿中的封面图片',\r\n        '投稿の表紙画像を保存',\r\n        'Save the cover image in the articles',\r\n        '儲存投稿中的封面圖片',\r\n    ],\r\n};\r\nexport { langText };\r\n"],"sourceRoot":""}